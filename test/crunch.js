var should = require("should"),
    crunch = require("../crunch");

describe("#compare", function () {

  it("Should confirm equality", function () {
    var x = [5, 57, 84, 76],
        y = [5, 57, 84, 76];

    crunch.compare(x, y).should.equal(0);

    x.should.eql([5, 57, 84, 76]);
    y.should.eql([5, 57, 84, 76]);
  });

  it("Should find first is greater than second", function () {
    var x = [5, 57, 84, 76],
        y = [57, 84, 75];

    crunch.compare(x, y).should.equal(1);

    x.should.eql([5, 57, 84, 76]);
    y.should.eql([57, 84, 75]);
  });

  it("Should find first is less than second", function () {
    var x = [5, 76],
        y = [6, 57, 84, 75];

    crunch.compare(x, y).should.equal(-1);

    x.should.eql([5, 76]);
    y.should.eql([6, 57, 84, 75]);
  });

  it("Should find first is less than second, negative", function () {
    var x = [-5, 76],
        y = [-6, 57, 84, 75, 44, 42];

    crunch.compare(x, y).should.equal(1);

    x.should.eql([-5, 76]);
    y.should.eql([-6, 57, 84, 75, 44, 42]);
  });

  it("Should find first is less than second, negative", function () {
    var x = [-6, 57, 84, 75, 44, 42],
        y = [-5, 76];

    crunch.compare(x, y).should.equal(-1);

    x.should.eql([-6, 57, 84, 75, 44, 42]);
    y.should.eql([-5, 76]);
  });

  it("Should find first is less than second, negative", function () {
    var x = [-6, 57, 83, 75, 44, 42],
        y = [-6, 57, 84, 75, 44, 42];

    crunch.compare(x, y).should.equal(1);

    x.should.eql([-6, 57, 83, 75, 44, 42]);
    y.should.eql([-6, 57, 84, 75, 44, 42]);
  });

  it("Should confirm equality, negative numbers", function () {
    var x = [-5, 10],
        y = [-5, 10];

    crunch.compare(x, y).should.equal(0);

    x.should.eql([-5, 10]);
    y.should.eql([-5, 10]);
  });

  it("Should find first is greater than second, negative numbers", function () {
    var x = [5, 10],
        y = [-5, 10];

    crunch.compare(x, y).should.equal(1);

    x.should.eql([5, 10]);
    y.should.eql([-5, 10]);
  });

  it("Should find first is less than second, negative numbers", function () {
    var x = [-5, 10],
        y = [-4, 10];

    crunch.compare(x, y).should.equal(-1);

    x.should.eql([-5, 10]);
    y.should.eql([-4, 10]);
  });

  it("Should find first parsed negative number less than second", function () {
    var x = crunch.parse("-9999999999999999"),
        y = crunch.parse("0");

    crunch.compare(x, y).should.equal(-1);
  });

  it("Should find second parsed negative number less than first", function () {
    var x = crunch.parse("0"),
        y = crunch.parse("-9999999999999999");

    crunch.compare(x, y).should.equal(1);
  });

  it("Should find equality in parsed numbers", function () {
    var x = crunch.parse("14314141"),
        y = crunch.parse("14314141");

    crunch.compare(x, y).should.equal(0);
  });

  it("Should find first parsed number greater than second", function () {
    var x = crunch.parse("32434111"),
        y = crunch.parse("1438791");

    crunch.compare(x, y).should.equal(1);
  });

});

describe("#add", function () {

  it("Should add numbers", function () {
    var x = [242, 62],
        y = [42, 2];

    crunch.add(x, y).should.eql([1, 28, 64]);

    x.should.eql([242, 62]);
    y.should.eql([42, 2]);
  });

  it("Should add numbers, first longer than second", function () {
    var x = [26, 255, 230, 17],
        y = [42, 34];

    crunch.add(x, y).should.eql([27, 0, 16, 51]);

    x.should.eql([26, 255, 230, 17]);
    y.should.eql([42, 34]);
  });

  it("Should add numbers, second longer than first", function () {
    var x = [234, 34],
        y = [255, 255, 230, 17];

    crunch.add(x, y).should.eql([1, 0, 0, 208, 51]);

    x.should.eql([234, 34]);
    y.should.eql([255, 255, 230, 17]);
  });

  it("Should add two identical numbers", function () {
    var x = [255, 255, 255, 255, 255, 255],
        y = [255, 255, 255, 255, 255, 255];

    crunch.add(x, y).should.eql([1, 255, 255, 255, 255, 255, 254]);

    x.should.eql([255, 255, 255, 255, 255, 255]);
    y.should.eql([255, 255, 255, 255, 255, 255]);
  });

  it("Should add positive to negative number expecting positive result", function () {
    var x = [51, 254, 144, 207],
        y = [-20, 89, 145, 32];

    crunch.add(x, y).should.eql([31, 164, 255, 175]);

    x.should.eql([51, 254, 144, 207]);
    y.should.eql([-20, 89, 145, 32]);
  });

  it("Should add positive to negative number expecting negative result", function () {
    var x = [242, 62],
        y = [-242, 64];

    crunch.add(x, y).should.eql([-2]);

    x.should.eql([242, 62]);
    y.should.eql([-242, 64]);
  });

  it('Should add negative to positive number expecting positive result', function () {
    var x = [-42, 2],
        y = [242, 62];

    crunch.add(x, y).should.eql([200, 60]);

    x.should.eql([-42, 2]);
    y.should.eql([242, 62]);
  });

  it("Should add negative to positive number expecting negative result", function () {
    var x = [-42, 2],
        y = [42, 0];

    crunch.add(x, y).should.eql([-2]);

    x.should.eql([-42, 2]);
    y.should.eql([42, 0]);
  });

  it("Should add two negative numbers expecting negative result", function () {
    var x = [-242, 62],
        y = [-42, 2];

    crunch.add(x, y).should.eql([-1, 28, 64]);

    x.should.eql([-242, 62]);
    y.should.eql([-42, 2]);
  });

  it("Should add zero to number", function () {
    var x = [26, 255, 230, 17],
        y = [0];

    crunch.add(x, y).should.eql([26, 255, 230, 17]);

    x.should.eql([26, 255, 230, 17]);
    y.should.eql([0]);
  });

  it("Should add number to zero", function () {
    var x = [0],
        y = [43, 123, 200, 1];

    crunch.add(x, y).should.eql([43, 123, 200, 1]);

    x.should.eql([0]);
    y.should.eql([43, 123, 200, 1]);
  });

  it("Should add two zeros", function () {
    var x = [0],
        y = [0];

    crunch.add(x, y).should.eql([0]);

    x.should.eql([0]);
    y.should.eql([0]);
  });

});

describe("#sub", function () {

  it("Should subtract numbers", function () {
    var x = [170, 1, 79, 119, 242, 62],
        y = [17, 241, 123, 250, 42, 2];

    crunch.sub(x, y).should.eql([152, 15, 211, 125, 200, 60]);

    x.should.eql([170, 1, 79, 119, 242, 62]);
    y.should.eql([17, 241, 123, 250, 42, 2]);
  });

  it("Should subtract one", function () {
    var x = [240, 0, 0, 0, 0, 0],
        y = [1];

    crunch.sub(x, y).should.eql([239, 255, 255, 255, 255, 255]);

    x.should.eql([240, 0, 0, 0, 0, 0]);
    y.should.eql([1]);
  });

  it("Should subtract numbers expecting negative result", function () {
    var x = [26],
        y = [255];

    crunch.sub(x, y).should.eql([-229]);

    x.should.eql([26]);
    y.should.eql([255]);
  });

  it("Should subtract numbers expecting negative result", function () {
    var x = [188, 196],
        y = [188, 197];

    crunch.sub(x, y).should.eql([-1]);

    x.should.eql([188, 196]);
    y.should.eql([188, 197]);
  });

  it("Should subtract negative number from positive", function () {
    var x = [240, 0, 0, 0, 0, 0],
        y = [-1];

    crunch.sub(x, y).should.eql([240, 0, 0, 0, 0, 1]);

    x.should.eql([240, 0, 0, 0, 0, 0]);
    y.should.eql([-1]);
  });

  it("Should subtract positive number from negative", function () {
    var x = [-240, 0, 0, 0, 0, 0],
        y = [1];

    crunch.sub(x, y).should.eql([-240, 0, 0, 0, 0, 1]);

    x.should.eql([-240, 0, 0, 0, 0, 0]);
    y.should.eql([1]);
  });

  it("Should subtract two negative numbers", function () {
    var x = [-240, 0, 0, 0, 0, 0],
        y = [-1];

    crunch.sub(x, y).should.eql([-239, 255, 255, 255, 255, 255]);

    x.should.eql([-240, 0, 0, 0, 0, 0]);
    y.should.eql([-1]);
  });

  it("Should subtract two equal numbers expecting zero", function () {
    var x = [20],
        y = [20];

    crunch.sub(x, y).should.eql([0]);

    x.should.eql([20]);
    y.should.eql([20]);
  });

  it("Should subtract zero", function () {
    var x = [244, 137, 7, 161],
        y = [0];

    crunch.sub(x, y).should.eql([244, 137, 7, 161]);

    x.should.eql([244, 137, 7, 161]);
    y.should.eql([0]);
  });

  it("Should subtract zero from zero", function () {
    var x = [0],
        y = [0];

    crunch.sub(x, y).should.eql([0]);

    x.should.eql([0]);
    y.should.eql([0]);
  });

  it("Should subtract from zero", function () {
    var x = [0],
        y = [15];

    crunch.sub(x, y).should.eql([-15]);

    x.should.eql([0]);
    y.should.eql([15]);
  });

});

describe("#mul", function () {

  it("Should multiply numbers", function () {
    var x = [162, 51, 95],
        y = [42, 18, 204];

    crunch.mul(x, y).should.eql([26, 168, 86, 115, 157, 180]);

    x.should.eql([162, 51, 95]);
    y.should.eql([42, 18, 204]);
  });

  it("Should multiply numbers", function () {
    var x = [255, 65, 34, 51, 95],
        y = [42, 18, 204];

    crunch.mul(x, y).should.eql([41, 243, 109, 152, 188, 115, 157, 180]);

    x.should.eql([255, 65, 34, 51, 95]);
    y.should.eql([42, 18, 204]);
  });

  it("Should multiply numbers", function () {
    var x = [255, 255, 255, 255],
        y = [255, 255, 255, 255];

    crunch.mul(x, y).should.eql([255, 255, 255, 254, 0, 0, 0, 1]);

    x.should.eql([255, 255, 255, 255]);
    y.should.eql([255, 255, 255, 255]);
  });

  it("Should multiply positive with negative number", function () {
    var x = [77, 242, 62],
        y = [-42, 2, 113, 43, 57, 65];

    crunch.mul(x, y).should.eql([-12, 202, 124, 133, 146, 125, 36, 79, 190]);

    x.should.eql([77, 242, 62]);
    y.should.eql([-42, 2, 113, 43, 57, 65]);
  });

  it("Should multiply negative with positive number", function () {
    var x = [-255, 17, 162, 62],
        y = [255, 17, 162, 62];

    crunch.mul(x, y).should.eql([-254, 36, 34, 110, 119, 14, 135, 4]);

    x.should.eql([-255, 17, 162, 62]);
    y.should.eql([255, 17, 162, 62]);
  });

  it("Should multiply two negative numbers", function () {
    var x = [-162, 51, 95],
        y = [-42, 18, 204];

    crunch.mul(x, y).should.eql([26, 168, 86, 115, 157, 180]);

    x.should.eql([-162, 51, 95]);
    y.should.eql([-42, 18, 204]);
  });

  it("Should multiply by zero", function () {
    var x = [77, 242, 62],
        y = [0];

    crunch.mul(x, y).should.eql([0]);

    x.should.eql([77, 242, 62]);
    y.should.eql([0]);
  });

  it("Should multiply zero by number", function () {
    var x = [0],
        y = [77, 242, 62];

    crunch.mul(x, y).should.eql([0]);

    x.should.eql([0]);
    y.should.eql([77, 242, 62]);
  });

  it("Should multiply zeros", function () {
    var x = [0],
        y = [0];

    crunch.mul(x, y).should.eql([0]);

    x.should.eql([0]);
    y.should.eql([0]);
  });

  it("Should multiply large numbers", function () {
    var x = [81, 5, 119, 54, 218, 179, 44, 225, 157, 58, 103, 65, 218, 10, 233, 139, 92, 178, 251, 9, 226, 232, 225, 14, 10, 46, 181, 12, 54, 74, 104, 158, 51, 218, 66, 147, 3, 217, 172, 45, 152, 200, 5, 22, 105, 153, 98, 182, 122, 102, 68, 57, 33, 204, 223, 145, 163, 99, 45, 174, 41, 241, 66, 197, 24, 38, 96, 140, 163, 43, 146, 6, 182, 251, 228, 88, 24, 118, 123, 208, 213, 214, 131, 212, 226, 107, 125, 200, 190, 206, 35, 51, 21, 0, 191, 194, 235, 87, 79, 28, 231, 200, 218, 112, 244, 0, 141, 28, 154, 94, 210, 206, 42, 237, 42, 202, 54, 120, 50, 206, 157, 133, 236, 40, 250, 210, 175, 95, 73, 15, 170, 201, 235, 233, 150, 109, 114, 4, 235, 19, 227, 130, 133, 28, 32, 28, 83, 12, 111, 71, 237, 152, 150, 98, 193, 134, 135, 151, 192, 58, 165, 118, 236, 16, 131, 133, 193, 134, 234, 117, 198, 236, 234, 220, 190, 57, 76, 94, 160, 224, 66, 101, 56, 231, 75, 50, 171, 118, 148, 98, 212, 240, 147, 161, 6, 218, 116, 74, 202, 10, 231, 212, 14, 108, 146, 8, 45, 247, 9, 183, 171, 24, 245, 6, 96, 230, 206, 111, 185, 32, 231, 149, 174, 78, 248, 126, 145, 87, 57, 79, 73, 59, 68, 123, 207, 208, 161, 242, 220, 18, 246, 231, 133, 16, 152, 118, 157, 103, 29, 219, 96, 118, 191, 180, 134, 124, 120, 172, 98, 4, 93, 250, 194, 48, 171, 237, 250, 50, 11, 3, 23, 205, 252, 127, 130, 66, 197, 144, 192, 203, 169, 125, 70, 183, 113, 127, 65, 196, 141, 242, 251, 76, 122, 57, 114, 216, 129, 200, 253, 79, 249, 31, 18, 198, 73, 77, 44, 242, 66, 110, 50, 246, 107, 201, 92, 103, 17, 109, 224, 225, 207, 197, 239, 110, 234, 47, 109, 37, 27, 147, 168, 171, 158, 84, 204, 125, 72, 176, 98, 101, 174, 21, 186, 82, 246, 232, 3, 117, 48, 66, 213, 29, 151, 133, 133, 109, 55, 241, 55, 158, 50, 231, 1, 89, 246, 138, 224, 130, 172, 230, 103, 132, 3, 85, 106, 222, 200, 128, 71, 66, 219, 253, 138, 176, 198, 65, 104, 34, 229, 142, 201, 177, 166, 1, 160, 230, 200, 39, 73, 87, 172, 11, 63, 69, 166, 145, 41, 188, 111, 64, 248, 210, 20, 68, 20, 64, 212, 111, 211, 189, 48, 240, 29, 158, 115, 72, 22, 13, 137, 243, 249, 83, 92, 180, 253, 16, 114, 123, 126, 101, 111, 74, 157, 75, 66, 251, 108, 165, 134, 88, 212, 63, 211, 240, 247, 44, 98, 18, 68, 237, 87, 238, 78, 58, 169, 61, 248, 177, 85, 186, 138, 51, 206, 26, 85, 233, 255, 176, 125, 118, 236, 208, 87, 111, 221, 168, 214, 46, 160, 93, 56, 142, 35, 152, 221, 33, 200, 11, 162, 90],
        y = [228, 97, 60, 177, 171, 84, 14, 101, 149, 62, 192, 188, 94, 75, 108, 121, 9, 144, 134, 19, 232, 148, 162, 170, 127, 86, 85, 253, 54, 119, 15, 115, 48, 92, 186, 141, 153, 156, 107, 193, 79, 113, 58, 235, 79, 103, 129, 111, 64, 24, 156, 6, 76, 96, 162, 58, 183, 216, 181, 193, 43, 137, 2, 143, 232, 170, 187, 127, 60, 174, 69, 127, 147, 68, 108, 180, 112, 165, 148, 250, 188, 217, 70, 139, 23, 192, 117, 245, 214, 82, 74, 148, 157, 189, 178, 74, 208, 157, 176, 244, 77, 166, 171, 18, 95, 224, 14, 100, 36, 23, 165, 152, 253, 69, 130, 248, 143, 210, 122, 254, 6, 59, 23, 21, 168, 183, 204, 94, 67, 36, 68, 160, 202, 116, 187, 201, 151, 149, 33, 182, 71, 139, 220, 193, 77, 165, 27, 3, 183, 70, 101, 247, 16, 142, 166, 236, 12, 60, 206, 135, 62, 63, 16, 72, 74, 133, 135, 172, 131, 125, 179, 46, 6, 118, 119, 8, 123, 135, 90, 180, 80, 66, 209, 83, 218, 125, 122, 25, 181, 83, 62, 226, 84, 48, 202, 82, 145, 70, 139, 9, 229, 161, 246, 100, 171, 171, 229, 226, 12, 136, 97, 247, 254, 196, 107, 30, 156, 2, 255, 20, 30, 196, 25, 15, 186, 26, 243, 135, 122, 81, 82, 230, 113, 119, 119, 6, 30, 2, 40, 48, 177, 82, 122, 201, 77, 173, 167, 73, 95, 174, 169, 120, 69, 221, 122, 87, 168, 237, 127, 31, 114, 182, 210, 181, 254, 36, 48, 43, 58, 68, 250, 165, 60, 99, 37, 244, 65, 51, 100, 184, 251, 163, 38, 16, 37, 191, 113, 130, 175, 129, 147, 173, 61, 142, 147, 243, 205, 160, 154, 199, 190, 134, 75, 27, 3, 115, 72, 253, 244, 58, 154, 14, 215, 18, 138, 109, 112, 30, 227, 147, 180, 107, 112, 195, 139, 207, 146, 155, 234, 48, 140, 119, 220, 15, 11, 200, 190, 118, 24, 217, 22, 46, 55, 57, 251, 34, 144, 83, 90, 9, 218, 233, 224, 244, 132, 21, 114, 254, 227, 126, 11, 143, 176, 127, 55, 198, 244, 1, 51, 76, 100, 17, 192, 241, 84, 67, 206, 71, 220, 130, 138, 231, 255, 153, 150, 71, 1, 119, 214, 183, 17, 133, 213, 182, 110, 246, 119, 115, 74, 173, 184, 64, 46, 228, 116, 198, 211, 128, 95, 34, 101, 183, 156, 185, 180, 71, 219, 98, 112, 44, 19, 205, 56, 207, 83, 126, 179, 4, 164, 102, 146, 175, 58, 156, 197, 57, 119, 59, 164, 189, 54, 103, 17, 214, 188, 150, 164, 58, 51, 1, 132, 158, 162, 251, 67, 245, 201, 91, 145, 221, 112, 59, 25, 147, 226, 3, 185, 235, 219, 107, 167, 202, 3, 98, 226, 130, 39, 223, 228, 245, 2, 203, 54, 0, 107, 224, 83, 185, 107, 134, 252, 236, 35, 107, 129, 54, 108, 7, 108, 69, 221, 34, 11, 136, 166, 154, 22, 133, 1, 205, 213, 196, 230, 36, 85, 226, 226, 146, 44, 206, 84, 57, 139, 211, 19, 151, 153, 86, 225, 195, 183, 8, 71, 188, 32, 60, 126, 121, 88, 59, 103, 33, 214, 201, 88, 223, 65, 64, 11, 73, 61, 226, 54, 176, 97, 134, 24, 145, 247, 138, 16, 230, 18, 208, 237, 208, 67, 140, 105, 86, 170, 201, 190, 131, 89, 47, 43, 40, 152, 196, 249, 31, 162, 242, 211, 29, 228, 111, 94, 141, 156, 200, 195, 6, 39, 186, 55, 77, 9, 232, 138, 225, 186, 162, 1, 138, 253, 4, 212, 98, 188, 208, 99, 185, 192, 109, 88, 173, 39, 74, 167, 210, 190, 251, 255, 92, 32, 59, 121, 186, 203, 241, 71, 79, 213, 119, 170, 146, 228, 204, 133, 241, 87, 103, 17, 35, 228, 78, 223, 162, 164, 207, 221, 74, 70, 222, 223, 216, 32, 217, 146, 74, 206, 13, 57, 69, 193, 43, 138, 185, 184, 237, 254, 77, 238, 172, 42, 176, 143, 188, 105, 16, 17, 22, 104, 138, 248, 18, 130, 84, 70, 172, 18, 142, 65, 86, 106, 127, 52, 178, 0, 215, 127, 200, 244, 93, 128, 143, 247, 216, 113, 92, 235, 124, 215, 150, 230, 114, 223, 78, 200, 71, 81, 210, 24, 130, 1, 32, 94, 134, 191, 80, 3, 12, 65, 115, 1, 227, 24, 247, 249, 11, 126, 139, 132, 113, 240, 80, 93, 239, 4, 48, 72, 201, 47, 220, 242, 229, 112, 146, 207, 88, 2, 27, 95, 41, 165, 225, 220, 51, 142, 185, 77, 92, 40, 250, 177, 197, 167, 204, 121, 213, 212, 168, 228, 195, 163, 186, 99, 61, 3, 68, 22, 180, 177, 7, 243, 132, 206, 142, 196, 216, 141, 52, 30, 91, 45, 154, 114, 104, 207, 214, 47, 197, 7, 10, 158, 28, 199, 103, 219, 27, 50, 144, 230, 72, 236, 11, 190, 199, 196, 144, 83, 77, 201, 215, 125, 24, 245, 162, 65, 162, 250, 235, 97, 254, 213, 240, 54, 191, 229, 227, 73, 230, 207, 129, 204, 107, 223, 65, 124, 200, 68, 171, 167, 249, 137, 105, 80, 86, 106, 13, 141, 123, 27, 6, 18, 155, 97, 6, 106, 13, 56, 173, 124, 101, 142, 43, 18, 15, 52, 134, 104, 190, 170, 38, 218, 68, 213, 30, 128, 69, 156, 50, 113, 105, 55, 244, 252, 156, 30, 100, 224, 196, 188, 226, 171, 170, 182, 222, 219, 37, 178, 101, 165, 123, 224, 121, 31, 100, 66, 118, 72, 228, 1, 40, 10, 41, 131, 86, 231, 1, 75, 58, 227, 14, 65, 115, 126, 46, 152, 69, 137, 20, 115, 226, 68, 157, 62, 12, 216, 141, 249, 180, 108, 116, 228, 148, 157, 79, 129, 19, 9, 220, 173, 78, 74, 201, 68, 112, 210, 74, 138, 224, 174, 85, 246, 152, 88, 215, 61, 110, 61, 162, 66, 220, 77, 246, 6, 189];

    crunch.mul(x, y).should.eql([72, 71, 164, 116, 137, 129, 251, 7, 90, 234, 5, 4, 50, 196, 161, 11, 223, 67, 93, 174, 2, 192, 40, 54, 51, 53, 184, 71, 241, 147, 24, 52, 108, 50, 227, 35, 22, 9, 22, 24, 114, 217, 15, 245, 236, 115, 142, 170, 148, 25, 67, 217, 124, 68, 18, 240, 168, 203, 99, 251, 167, 12, 142, 132, 191, 14, 21, 18, 90, 248, 124, 96, 133, 154, 163, 45, 200, 242, 208, 97, 239, 96, 102, 136, 16, 56, 219, 73, 205, 34, 56, 223, 220, 230, 164, 155, 247, 52, 234, 167, 231, 81, 211, 88, 107, 232, 70, 16, 246, 14, 11, 15, 49, 91, 1, 66, 236, 65, 167, 83, 38, 121, 116, 230, 73, 12, 125, 125, 142, 124, 246, 85, 77, 24, 29, 119, 208, 232, 53, 245, 129, 119, 39, 245, 69, 14, 143, 186, 75, 111, 106, 117, 33, 231, 243, 19, 17, 253, 82, 132, 163, 16, 39, 150, 76, 12, 85, 137, 201, 233, 223, 99, 141, 125, 151, 21, 122, 214, 146, 67, 144, 15, 187, 108, 145, 239, 4, 13, 194, 96, 23, 67, 229, 78, 234, 51, 116, 33, 140, 145, 212, 98, 3, 183, 15, 176, 191, 186, 104, 124, 42, 221, 193, 30, 78, 68, 44, 19, 154, 162, 67, 41, 243, 252, 42, 215, 12, 220, 99, 197, 96, 152, 237, 8, 251, 14, 172, 96, 237, 116, 142, 249, 144, 19, 186, 240, 95, 185, 200, 18, 122, 73, 103, 153, 226, 57, 255, 231, 239, 238, 141, 34, 106, 234, 63, 253, 198, 68, 24, 46, 99, 29, 144, 49, 92, 31, 72, 76, 244, 19, 155, 135, 66, 144, 63, 225, 4, 27, 190, 223, 75, 92, 75, 48, 127, 58, 16, 166, 85, 27, 109, 51, 12, 127, 15, 89, 61, 244, 30, 87, 2, 109, 93, 40, 134, 162, 43, 75, 254, 175, 249, 219, 238, 182, 147, 8, 172, 163, 49, 241, 235, 156, 217, 117, 32, 231, 116, 63, 34, 175, 134, 85, 88, 0, 54, 248, 91, 86, 227, 223, 37, 146, 26, 70, 62, 4, 119, 68, 7, 249, 249, 220, 233, 225, 174, 47, 97, 250, 33, 105, 207, 217, 161, 229, 168, 193, 87, 232, 159, 255, 47, 156, 79, 11, 199, 234, 113, 68, 195, 98, 71, 28, 183, 216, 194, 182, 214, 66, 88, 236, 77, 197, 240, 101, 34, 46, 74, 31, 241, 127, 21, 195, 254, 167, 4, 250, 122, 209, 208, 48, 72, 197, 242, 101, 93, 66, 0, 82, 215, 214, 112, 145, 175, 102, 37, 210, 158, 62, 110, 81, 16, 23, 207, 126, 52, 167, 10, 111, 158, 29, 129, 111, 178, 52, 120, 252, 187, 71, 171, 120, 155, 80, 135, 98, 176, 33, 129, 241, 21, 167, 229, 92, 130, 233, 88, 2, 221, 142, 91, 194, 28, 83, 199, 89, 15, 108, 121, 8, 20, 212, 196, 106, 105, 61, 27, 195, 113, 216, 216, 205, 165, 170, 83, 56, 70, 39, 12, 126, 79, 150, 208, 29, 32, 189, 56, 194, 117, 207, 216, 36, 41, 111, 16, 250, 1, 242, 61, 220, 79, 254, 9, 25, 195, 52, 99, 18, 75, 129, 31, 69, 60, 59, 163, 118, 203, 202, 93, 97, 195, 70, 137, 241, 20, 160, 160, 10, 87, 50, 250, 3, 87, 107, 62, 168, 231, 185, 92, 79, 58, 16, 226, 67, 234, 63, 80, 194, 73, 153, 245, 116, 143, 194, 137, 185, 240, 164, 34, 150, 133, 48, 5, 88, 174, 243, 37, 81, 187, 162, 202, 201, 101, 207, 111, 220, 158, 12, 194, 8, 228, 58, 234, 114, 2, 32, 100, 100, 231, 229, 35, 253, 12, 29, 48, 229, 116, 180, 137, 80, 52, 178, 119, 180, 188, 154, 215, 255, 5, 15, 80, 199, 70, 82, 116, 98, 254, 118, 189, 211, 30, 102, 92, 209, 78, 92, 153, 215, 203, 1, 203, 214, 191, 22, 112, 217, 79, 36, 190, 15, 13, 37, 111, 33, 0, 166, 69, 108, 82, 155, 228, 125, 216, 246, 89, 59, 68, 142, 33, 229, 39, 195, 234, 182, 13, 139, 223, 197, 167, 22, 148, 239, 158, 240, 101, 106, 87, 44, 7, 78, 246, 90, 163, 35, 117, 126, 16, 48, 164, 134, 255, 38, 113, 66, 171, 251, 156, 187, 128, 238, 178, 196, 59, 251, 94, 193, 58, 28, 86, 61, 87, 175, 18, 234, 163, 93, 116, 236, 56, 218, 24, 55, 104, 19, 208, 54, 33, 0, 179, 104, 164, 25, 58, 182, 31, 141, 22, 30, 10, 39, 219, 54, 103, 203, 108, 250, 207, 240, 82, 164, 189, 67, 142, 229, 129, 195, 48, 154, 203, 92, 62, 155, 176, 238, 187, 72, 155, 240, 23, 74, 46, 243, 66, 28, 167, 100, 128, 220, 239, 177, 115, 48, 195, 183, 145, 46, 59, 148, 206, 116, 245, 86, 226, 69, 38, 238, 221, 18, 195, 213, 36, 84, 117, 78, 234, 40, 90, 165, 67, 220, 94, 81, 81, 118, 91, 228, 105, 221, 195, 251, 36, 9, 113, 58, 248, 117, 21, 239, 63, 61, 254, 28, 124, 104, 19, 220, 239, 123, 180, 58, 20, 207, 0, 226, 71, 139, 172, 78, 115, 122, 241, 124, 64, 197, 243, 82, 187, 62, 122, 188, 135, 87, 191, 23, 98, 19, 161, 18, 142, 231, 128, 22, 12, 40, 242, 0, 173, 182, 0, 117, 202, 212, 235, 210, 124, 134, 255, 110, 68, 29, 174, 74, 146, 216, 133, 101, 191, 148, 9, 104, 164, 33, 238, 45, 192, 1, 74, 252, 2, 114, 252, 227, 9, 171, 122, 47, 64, 243, 116, 32, 209, 114, 86, 159, 110, 237, 131, 203, 12, 70, 59, 127, 215, 22, 253, 67, 58, 198, 212, 60, 7, 115, 70, 2, 72, 158, 175, 217, 187, 91, 21, 109, 84, 60, 73, 113, 118, 232, 137, 16, 207, 164, 177, 243, 106, 23, 224, 207, 170, 25, 219, 246, 69, 117, 135, 128, 206, 194, 74, 39, 67, 230, 217, 153, 25, 247, 188, 18, 71, 132, 146, 147, 145, 210, 232, 45, 41, 119, 192, 159, 214, 168, 150, 187, 173, 237, 124, 20, 186, 156, 4, 50, 7, 73, 117, 197, 167, 181, 149, 193, 41, 148, 230, 11, 136, 224, 246, 143, 8, 73, 118, 193, 14, 144, 158, 183, 198, 134, 56, 147, 43, 180, 25, 231, 55, 151, 38, 249, 130, 14, 120, 37, 77, 135, 107, 27, 32, 80, 9, 105, 112, 119, 248, 21, 81, 9, 25, 134, 41, 227, 93, 223, 75, 163, 115, 5, 104, 172, 121, 191, 71, 216, 239, 16, 173, 70, 100, 171, 26, 169, 194, 167, 208, 109, 128, 39, 134, 124, 207, 136, 65, 203, 232, 232, 66, 127, 76, 169, 72, 238, 11, 254, 127, 119, 94, 23, 131, 45, 197, 107, 160, 122, 194, 47, 127, 57, 100, 74, 182, 126, 77, 14, 96, 158, 33, 247, 120, 162, 169, 20, 50, 56, 200, 126, 231, 88, 4, 197, 231, 72, 101, 208, 238, 171, 79, 133, 103, 140, 131, 164, 10, 219, 231, 214, 124, 189, 75, 164, 72, 112, 177, 84, 140, 18, 137, 72, 99, 239, 235, 84, 17, 37, 104, 183, 143, 143, 16, 48, 78, 206, 129, 234, 217, 53, 10, 131, 4, 190, 183, 3, 151, 201, 68, 67, 59, 229, 55, 172, 0, 160, 32, 4, 234, 161, 149, 50, 3, 104, 124, 56, 173, 250, 113, 151, 238, 96, 135, 192, 192, 180, 210, 97, 133, 183, 188, 115, 109, 70, 131, 166, 214, 250, 66, 152, 41, 6, 167, 31, 64, 127, 31, 121, 176, 220, 172, 150, 132, 143, 137, 76, 160, 19, 255, 138, 51, 16, 110, 40, 95, 116, 44, 99, 121, 202, 113, 88, 209, 238, 180, 69, 45, 190, 23, 60, 212, 28, 167, 27, 145, 176, 39, 61, 238, 187, 26, 20, 120, 206, 142, 184, 189, 233, 91, 18, 201, 131, 27, 14, 66, 208, 87, 68, 206, 194, 23, 92, 103, 216, 72, 61, 64, 15, 131, 85, 137, 132, 86, 9, 145, 176, 25, 230, 33, 120, 176, 55, 254, 52, 191, 197, 69, 88, 165, 93, 27, 168, 104, 153, 101, 218, 218, 178, 167, 125, 139, 39, 9, 106, 161, 69, 10, 39, 54, 227, 103, 30, 2, 165, 151, 161, 189, 96, 10, 254, 114, 2, 108, 24, 128, 186, 237, 209, 4, 128, 107, 21, 234, 243, 198, 198, 47, 246, 98, 240, 40, 130, 206, 9, 212, 202, 116, 93, 71, 82, 128, 88, 38, 124, 221, 10, 5, 222, 252, 254, 248, 5, 39, 145, 221, 104, 61, 178, 104, 143, 7, 130, 70, 128, 180, 175, 65, 251, 192, 217, 201, 75, 69, 241, 16, 145, 12, 126, 176, 120, 54, 224, 235, 11, 76, 152, 225, 246, 2, 92, 2, 136, 8, 36, 130, 185, 174, 34, 149, 128, 157, 122, 128, 252, 10, 224, 248, 114]);

    x.should.eql([81, 5, 119, 54, 218, 179, 44, 225, 157, 58, 103, 65, 218, 10, 233, 139, 92, 178, 251, 9, 226, 232, 225, 14, 10, 46, 181, 12, 54, 74, 104, 158, 51, 218, 66, 147, 3, 217, 172, 45, 152, 200, 5, 22, 105, 153, 98, 182, 122, 102, 68, 57, 33, 204, 223, 145, 163, 99, 45, 174, 41, 241, 66, 197, 24, 38, 96, 140, 163, 43, 146, 6, 182, 251, 228, 88, 24, 118, 123, 208, 213, 214, 131, 212, 226, 107, 125, 200, 190, 206, 35, 51, 21, 0, 191, 194, 235, 87, 79, 28, 231, 200, 218, 112, 244, 0, 141, 28, 154, 94, 210, 206, 42, 237, 42, 202, 54, 120, 50, 206, 157, 133, 236, 40, 250, 210, 175, 95, 73, 15, 170, 201, 235, 233, 150, 109, 114, 4, 235, 19, 227, 130, 133, 28, 32, 28, 83, 12, 111, 71, 237, 152, 150, 98, 193, 134, 135, 151, 192, 58, 165, 118, 236, 16, 131, 133, 193, 134, 234, 117, 198, 236, 234, 220, 190, 57, 76, 94, 160, 224, 66, 101, 56, 231, 75, 50, 171, 118, 148, 98, 212, 240, 147, 161, 6, 218, 116, 74, 202, 10, 231, 212, 14, 108, 146, 8, 45, 247, 9, 183, 171, 24, 245, 6, 96, 230, 206, 111, 185, 32, 231, 149, 174, 78, 248, 126, 145, 87, 57, 79, 73, 59, 68, 123, 207, 208, 161, 242, 220, 18, 246, 231, 133, 16, 152, 118, 157, 103, 29, 219, 96, 118, 191, 180, 134, 124, 120, 172, 98, 4, 93, 250, 194, 48, 171, 237, 250, 50, 11, 3, 23, 205, 252, 127, 130, 66, 197, 144, 192, 203, 169, 125, 70, 183, 113, 127, 65, 196, 141, 242, 251, 76, 122, 57, 114, 216, 129, 200, 253, 79, 249, 31, 18, 198, 73, 77, 44, 242, 66, 110, 50, 246, 107, 201, 92, 103, 17, 109, 224, 225, 207, 197, 239, 110, 234, 47, 109, 37, 27, 147, 168, 171, 158, 84, 204, 125, 72, 176, 98, 101, 174, 21, 186, 82, 246, 232, 3, 117, 48, 66, 213, 29, 151, 133, 133, 109, 55, 241, 55, 158, 50, 231, 1, 89, 246, 138, 224, 130, 172, 230, 103, 132, 3, 85, 106, 222, 200, 128, 71, 66, 219, 253, 138, 176, 198, 65, 104, 34, 229, 142, 201, 177, 166, 1, 160, 230, 200, 39, 73, 87, 172, 11, 63, 69, 166, 145, 41, 188, 111, 64, 248, 210, 20, 68, 20, 64, 212, 111, 211, 189, 48, 240, 29, 158, 115, 72, 22, 13, 137, 243, 249, 83, 92, 180, 253, 16, 114, 123, 126, 101, 111, 74, 157, 75, 66, 251, 108, 165, 134, 88, 212, 63, 211, 240, 247, 44, 98, 18, 68, 237, 87, 238, 78, 58, 169, 61, 248, 177, 85, 186, 138, 51, 206, 26, 85, 233, 255, 176, 125, 118, 236, 208, 87, 111, 221, 168, 214, 46, 160, 93, 56, 142, 35, 152, 221, 33, 200, 11, 162, 90]);
    y.should.eql([228, 97, 60, 177, 171, 84, 14, 101, 149, 62, 192, 188, 94, 75, 108, 121, 9, 144, 134, 19, 232, 148, 162, 170, 127, 86, 85, 253, 54, 119, 15, 115, 48, 92, 186, 141, 153, 156, 107, 193, 79, 113, 58, 235, 79, 103, 129, 111, 64, 24, 156, 6, 76, 96, 162, 58, 183, 216, 181, 193, 43, 137, 2, 143, 232, 170, 187, 127, 60, 174, 69, 127, 147, 68, 108, 180, 112, 165, 148, 250, 188, 217, 70, 139, 23, 192, 117, 245, 214, 82, 74, 148, 157, 189, 178, 74, 208, 157, 176, 244, 77, 166, 171, 18, 95, 224, 14, 100, 36, 23, 165, 152, 253, 69, 130, 248, 143, 210, 122, 254, 6, 59, 23, 21, 168, 183, 204, 94, 67, 36, 68, 160, 202, 116, 187, 201, 151, 149, 33, 182, 71, 139, 220, 193, 77, 165, 27, 3, 183, 70, 101, 247, 16, 142, 166, 236, 12, 60, 206, 135, 62, 63, 16, 72, 74, 133, 135, 172, 131, 125, 179, 46, 6, 118, 119, 8, 123, 135, 90, 180, 80, 66, 209, 83, 218, 125, 122, 25, 181, 83, 62, 226, 84, 48, 202, 82, 145, 70, 139, 9, 229, 161, 246, 100, 171, 171, 229, 226, 12, 136, 97, 247, 254, 196, 107, 30, 156, 2, 255, 20, 30, 196, 25, 15, 186, 26, 243, 135, 122, 81, 82, 230, 113, 119, 119, 6, 30, 2, 40, 48, 177, 82, 122, 201, 77, 173, 167, 73, 95, 174, 169, 120, 69, 221, 122, 87, 168, 237, 127, 31, 114, 182, 210, 181, 254, 36, 48, 43, 58, 68, 250, 165, 60, 99, 37, 244, 65, 51, 100, 184, 251, 163, 38, 16, 37, 191, 113, 130, 175, 129, 147, 173, 61, 142, 147, 243, 205, 160, 154, 199, 190, 134, 75, 27, 3, 115, 72, 253, 244, 58, 154, 14, 215, 18, 138, 109, 112, 30, 227, 147, 180, 107, 112, 195, 139, 207, 146, 155, 234, 48, 140, 119, 220, 15, 11, 200, 190, 118, 24, 217, 22, 46, 55, 57, 251, 34, 144, 83, 90, 9, 218, 233, 224, 244, 132, 21, 114, 254, 227, 126, 11, 143, 176, 127, 55, 198, 244, 1, 51, 76, 100, 17, 192, 241, 84, 67, 206, 71, 220, 130, 138, 231, 255, 153, 150, 71, 1, 119, 214, 183, 17, 133, 213, 182, 110, 246, 119, 115, 74, 173, 184, 64, 46, 228, 116, 198, 211, 128, 95, 34, 101, 183, 156, 185, 180, 71, 219, 98, 112, 44, 19, 205, 56, 207, 83, 126, 179, 4, 164, 102, 146, 175, 58, 156, 197, 57, 119, 59, 164, 189, 54, 103, 17, 214, 188, 150, 164, 58, 51, 1, 132, 158, 162, 251, 67, 245, 201, 91, 145, 221, 112, 59, 25, 147, 226, 3, 185, 235, 219, 107, 167, 202, 3, 98, 226, 130, 39, 223, 228, 245, 2, 203, 54, 0, 107, 224, 83, 185, 107, 134, 252, 236, 35, 107, 129, 54, 108, 7, 108, 69, 221, 34, 11, 136, 166, 154, 22, 133, 1, 205, 213, 196, 230, 36, 85, 226, 226, 146, 44, 206, 84, 57, 139, 211, 19, 151, 153, 86, 225, 195, 183, 8, 71, 188, 32, 60, 126, 121, 88, 59, 103, 33, 214, 201, 88, 223, 65, 64, 11, 73, 61, 226, 54, 176, 97, 134, 24, 145, 247, 138, 16, 230, 18, 208, 237, 208, 67, 140, 105, 86, 170, 201, 190, 131, 89, 47, 43, 40, 152, 196, 249, 31, 162, 242, 211, 29, 228, 111, 94, 141, 156, 200, 195, 6, 39, 186, 55, 77, 9, 232, 138, 225, 186, 162, 1, 138, 253, 4, 212, 98, 188, 208, 99, 185, 192, 109, 88, 173, 39, 74, 167, 210, 190, 251, 255, 92, 32, 59, 121, 186, 203, 241, 71, 79, 213, 119, 170, 146, 228, 204, 133, 241, 87, 103, 17, 35, 228, 78, 223, 162, 164, 207, 221, 74, 70, 222, 223, 216, 32, 217, 146, 74, 206, 13, 57, 69, 193, 43, 138, 185, 184, 237, 254, 77, 238, 172, 42, 176, 143, 188, 105, 16, 17, 22, 104, 138, 248, 18, 130, 84, 70, 172, 18, 142, 65, 86, 106, 127, 52, 178, 0, 215, 127, 200, 244, 93, 128, 143, 247, 216, 113, 92, 235, 124, 215, 150, 230, 114, 223, 78, 200, 71, 81, 210, 24, 130, 1, 32, 94, 134, 191, 80, 3, 12, 65, 115, 1, 227, 24, 247, 249, 11, 126, 139, 132, 113, 240, 80, 93, 239, 4, 48, 72, 201, 47, 220, 242, 229, 112, 146, 207, 88, 2, 27, 95, 41, 165, 225, 220, 51, 142, 185, 77, 92, 40, 250, 177, 197, 167, 204, 121, 213, 212, 168, 228, 195, 163, 186, 99, 61, 3, 68, 22, 180, 177, 7, 243, 132, 206, 142, 196, 216, 141, 52, 30, 91, 45, 154, 114, 104, 207, 214, 47, 197, 7, 10, 158, 28, 199, 103, 219, 27, 50, 144, 230, 72, 236, 11, 190, 199, 196, 144, 83, 77, 201, 215, 125, 24, 245, 162, 65, 162, 250, 235, 97, 254, 213, 240, 54, 191, 229, 227, 73, 230, 207, 129, 204, 107, 223, 65, 124, 200, 68, 171, 167, 249, 137, 105, 80, 86, 106, 13, 141, 123, 27, 6, 18, 155, 97, 6, 106, 13, 56, 173, 124, 101, 142, 43, 18, 15, 52, 134, 104, 190, 170, 38, 218, 68, 213, 30, 128, 69, 156, 50, 113, 105, 55, 244, 252, 156, 30, 100, 224, 196, 188, 226, 171, 170, 182, 222, 219, 37, 178, 101, 165, 123, 224, 121, 31, 100, 66, 118, 72, 228, 1, 40, 10, 41, 131, 86, 231, 1, 75, 58, 227, 14, 65, 115, 126, 46, 152, 69, 137, 20, 115, 226, 68, 157, 62, 12, 216, 141, 249, 180, 108, 116, 228, 148, 157, 79, 129, 19, 9, 220, 173, 78, 74, 201, 68, 112, 210, 74, 138, 224, 174, 85, 246, 152, 88, 215, 61, 110, 61, 162, 66, 220, 77, 246, 6, 189]);
  });

});

describe("#mulk", function () {

  it("Should multiply numbers", function () {
    var x = [162, 51, 95],
        y = [42, 18, 204];

    crunch.mulk(x, y).should.eql([26, 168, 86, 115, 157, 180]);

    x.should.eql([162, 51, 95]);
    y.should.eql([42, 18, 204]);
  });

  it("Should multiply numbers", function () {
    var x = [255, 65, 34, 51, 95],
        y = [42, 18, 204];

    crunch.mulk(x, y).should.eql([41, 243, 109, 152, 188, 115, 157, 180]);

    x.should.eql([255, 65, 34, 51, 95]);
    y.should.eql([42, 18, 204]);
  });

  it("Should multiply negative with positive number", function () {
    var x = [-255, 17, 162, 62],
        y = [255, 17, 162, 62];

    crunch.mulk(x, y).should.eql([-254, 36, 34, 110, 119, 14, 135, 4]);

    x.should.eql([-255, 17, 162, 62]);
    y.should.eql([255, 17, 162, 62]);
  });

  it("Should multiply large numbers", function () {
    var x = [81, 5, 119, 54, 218, 179, 44, 225, 157, 58, 103, 65, 218, 10, 233, 139, 92, 178, 251, 9, 226, 232, 225, 14, 10, 46, 181, 12, 54, 74, 104, 158, 51, 218, 66, 147, 3, 217, 172, 45, 152, 200, 5, 22, 105, 153, 98, 182, 122, 102, 68, 57, 33, 204, 223, 145, 163, 99, 45, 174, 41, 241, 66, 197, 24, 38, 96, 140, 163, 43, 146, 6, 182, 251, 228, 88, 24, 118, 123, 208, 213, 214, 131, 212, 226, 107, 125, 200, 190, 206, 35, 51, 21, 0, 191, 194, 235, 87, 79, 28, 231, 200, 218, 112, 244, 0, 141, 28, 154, 94, 210, 206, 42, 237, 42, 202, 54, 120, 50, 206, 157, 133, 236, 40, 250, 210, 175, 95, 73, 15, 170, 201, 235, 233, 150, 109, 114, 4, 235, 19, 227, 130, 133, 28, 32, 28, 83, 12, 111, 71, 237, 152, 150, 98, 193, 134, 135, 151, 192, 58, 165, 118, 236, 16, 131, 133, 193, 134, 234, 117, 198, 236, 234, 220, 190, 57, 76, 94, 160, 224, 66, 101, 56, 231, 75, 50, 171, 118, 148, 98, 212, 240, 147, 161, 6, 218, 116, 74, 202, 10, 231, 212, 14, 108, 146, 8, 45, 247, 9, 183, 171, 24, 245, 6, 96, 230, 206, 111, 185, 32, 231, 149, 174, 78, 248, 126, 145, 87, 57, 79, 73, 59, 68, 123, 207, 208, 161, 242, 220, 18, 246, 231, 133, 16, 152, 118, 157, 103, 29, 219, 96, 118, 191, 180, 134, 124, 120, 172, 98, 4, 93, 250, 194, 48, 171, 237, 250, 50, 11, 3, 23, 205, 252, 127, 130, 66, 197, 144, 192, 203, 169, 125, 70, 183, 113, 127, 65, 196, 141, 242, 251, 76, 122, 57, 114, 216, 129, 200, 253, 79, 249, 31, 18, 198, 73, 77, 44, 242, 66, 110, 50, 246, 107, 201, 92, 103, 17, 109, 224, 225, 207, 197, 239, 110, 234, 47, 109, 37, 27, 147, 168, 171, 158, 84, 204, 125, 72, 176, 98, 101, 174, 21, 186, 82, 246, 232, 3, 117, 48, 66, 213, 29, 151, 133, 133, 109, 55, 241, 55, 158, 50, 231, 1, 89, 246, 138, 224, 130, 172, 230, 103, 132, 3, 85, 106, 222, 200, 128, 71, 66, 219, 253, 138, 176, 198, 65, 104, 34, 229, 142, 201, 177, 166, 1, 160, 230, 200, 39, 73, 87, 172, 11, 63, 69, 166, 145, 41, 188, 111, 64, 248, 210, 20, 68, 20, 64, 212, 111, 211, 189, 48, 240, 29, 158, 115, 72, 22, 13, 137, 243, 249, 83, 92, 180, 253, 16, 114, 123, 126, 101, 111, 74, 157, 75, 66, 251, 108, 165, 134, 88, 212, 63, 211, 240, 247, 44, 98, 18, 68, 237, 87, 238, 78, 58, 169, 61, 248, 177, 85, 186, 138, 51, 206, 26, 85, 233, 255, 176, 125, 118, 236, 208, 87, 111, 221, 168, 214, 46, 160, 93, 56, 142, 35, 152, 221, 33, 200, 11, 162, 90],
        y = [67, 229, 224, 223, 60, 183, 150, 189, 109, 97, 144, 224, 42, 225, 209, 91, 63, 16, 250, 75, 145, 100, 213, 224, 104, 67, 224, 198, 225, 255, 166, 67, 212, 145, 175, 131, 156, 204, 72, 1, 54, 38, 88, 75, 217, 55, 212, 124, 114, 175, 129, 104, 172, 201, 235, 80, 74, 108, 139, 57, 100, 90, 215, 17, 207, 180, 143, 109, 188, 51, 149, 232, 18, 202, 255, 224, 78, 155, 119, 160, 27, 184, 126, 41, 142, 208, 136, 136, 130, 226, 164, 147, 217, 111, 25, 250, 171, 125, 9, 73, 230, 235, 112, 61, 101, 180, 15, 43, 112, 35, 225, 84, 107, 117, 96, 24, 75, 174, 184, 177, 202, 183, 47, 217, 240, 25, 234, 239, 41, 101, 7, 201, 46, 129, 98, 43, 145, 100, 14, 172, 253, 213, 142, 205, 223, 74, 188, 69, 88, 109, 179, 175, 172, 29, 85, 168, 159, 105, 19, 84, 214, 28, 115, 219, 190, 167, 124, 0, 182, 3, 188, 127, 87, 186, 153, 218, 143, 102, 219, 40, 217, 93, 147, 156, 92, 129, 99, 172, 174, 250, 255, 155, 205, 17, 148, 221, 30, 100, 227, 90, 11, 10, 6, 43, 139, 156, 8, 142, 176, 8, 206, 238, 117, 195, 180, 100, 119, 243, 67, 34, 158, 193, 225, 168, 161, 182, 184, 232, 42, 234, 170, 31, 158, 82, 168, 254, 244, 85, 9, 222, 186, 13, 230, 118, 242, 96, 33, 241, 199, 222, 16, 22, 116, 50, 117, 2, 221, 228, 175, 73, 221, 121, 166, 175, 42, 59, 71, 230, 129, 155, 145, 130, 209, 217, 181, 118, 228, 197, 67, 235, 250, 81, 32, 25, 124, 95, 41, 142, 216, 44, 12, 23, 3, 101, 136, 116, 11, 72, 151, 5, 233, 179, 92, 215, 161, 199, 214, 12, 41, 203, 144, 32, 179, 6, 98, 229, 249, 171, 125, 143, 209, 252, 104, 228, 173, 223, 35, 180, 2, 176, 151, 146, 163, 55, 19, 147, 81, 81, 92, 253, 117, 40, 39, 54, 155, 171, 135, 14, 161, 140, 75, 67, 58, 135, 46, 185, 20, 229, 147, 111, 120, 1, 133, 156, 180, 122, 44, 67, 113, 0, 44, 246, 224, 232, 71, 52, 62, 202, 24, 166, 6, 144, 156, 83, 244, 210, 14, 255, 164, 61, 12, 104, 231, 226, 2, 109, 239, 134, 156, 163, 151, 33, 61, 47, 86, 158, 83, 47, 108, 229, 174, 116, 83, 49, 99, 166, 184, 212, 19, 11, 190, 194, 216, 131, 150, 15, 254, 192, 156, 102, 137, 130, 230, 244, 122, 84, 70, 208, 251, 30, 249, 72, 155, 15, 154, 143, 9, 34, 58, 212, 25, 248, 119, 165, 222, 0, 3, 25, 239, 213, 25, 49, 83, 74, 162, 124, 253, 77, 209, 164, 89, 33, 237, 67, 124, 86, 37, 52, 60, 245, 181, 85, 104, 132, 152, 36, 64, 240, 207, 167, 57, 238, 24, 29, 59, 5, 45, 73, 39, 25];

    crunch.mulk(x, y).should.eql([21, 125, 47, 66, 110, 152, 193, 185, 182, 75, 33, 76, 159, 56, 146, 80, 192, 91, 127, 245, 195, 186, 99, 69, 247, 198, 202, 248, 109, 44, 83, 248, 55, 164, 58, 54, 239, 143, 27, 9, 3, 229, 212, 116, 1, 189, 73, 138, 94, 117, 106, 183, 215, 77, 184, 194, 15, 190, 11, 92, 102, 46, 176, 22, 247, 149, 0, 171, 21, 2, 237, 72, 115, 104, 232, 208, 3, 96, 227, 238, 199, 40, 253, 171, 10, 254, 207, 200, 77, 178, 107, 99, 83, 21, 230, 131, 215, 137, 125, 210, 235, 168, 9, 231, 236, 243, 133, 112, 52, 196, 227, 171, 224, 141, 200, 40, 67, 211, 87, 241, 64, 54, 43, 220, 105, 251, 43, 84, 171, 227, 0, 245, 30, 62, 212, 23, 66, 194, 135, 188, 38, 176, 130, 114, 46, 123, 167, 153, 13, 253, 74, 55, 125, 151, 220, 100, 130, 218, 158, 146, 235, 244, 230, 171, 5, 121, 15, 177, 87, 203, 181, 238, 69, 247, 144, 109, 228, 24, 245, 116, 108, 243, 38, 143, 39, 98, 227, 64, 21, 207, 125, 80, 179, 62, 40, 119, 78, 216, 239, 22, 47, 77, 190, 201, 143, 224, 22, 122, 184, 166, 8, 69, 5, 218, 31, 254, 59, 243, 74, 144, 214, 134, 164, 120, 6, 236, 227, 187, 200, 42, 98, 28, 136, 75, 242, 90, 169, 157, 1, 225, 60, 93, 232, 153, 249, 144, 104, 165, 85, 47, 239, 151, 39, 93, 208, 125, 142, 221, 163, 82, 52, 25, 142, 69, 180, 52, 216, 68, 85, 172, 119, 31, 66, 8, 217, 226, 200, 252, 75, 215, 157, 2, 8, 52, 50, 242, 60, 83, 230, 216, 253, 173, 184, 39, 244, 177, 46, 20, 41, 46, 129, 111, 109, 186, 158, 229, 221, 43, 172, 13, 206, 255, 175, 189, 207, 243, 106, 137, 169, 175, 32, 84, 55, 187, 26, 59, 110, 72, 33, 95, 50, 159, 117, 62, 124, 113, 97, 97, 124, 224, 34, 79, 233, 86, 250, 120, 221, 206, 202, 71, 78, 131, 243, 216, 56, 186, 79, 17, 171, 226, 99, 106, 156, 2, 9, 201, 240, 80, 211, 202, 223, 165, 211, 243, 74, 27, 203, 163, 131, 254, 123, 186, 36, 193, 39, 213, 241, 124, 208, 165, 13, 150, 236, 71, 204, 104, 129, 240, 86, 129, 66, 137, 12, 186, 122, 132, 152, 79, 220, 195, 24, 214, 11, 100, 214, 187, 61, 191, 249, 101, 134, 7, 103, 58, 94, 228, 151, 107, 18, 164, 128, 31, 241, 192, 54, 246, 18, 223, 95, 59, 191, 85, 55, 176, 247, 117, 153, 9, 160, 87, 114, 29, 109, 3, 222, 151, 28, 122, 115, 131, 55, 74, 75, 162, 32, 118, 180, 36, 120, 119, 45, 27, 20, 195, 237, 236, 133, 51, 222, 43, 24, 222, 161, 24, 202, 115, 169, 220, 7, 87, 40, 120, 198, 165, 250, 131, 142, 6, 245, 122, 173, 198, 200, 81, 43, 124, 241, 179, 117, 23, 192, 115, 162, 78, 85, 251, 81, 97, 91, 180, 44, 223, 194, 121, 12, 187, 152, 119, 182, 145, 132, 146, 102, 27, 32, 119, 174, 53, 250, 174, 52, 113, 134, 39, 80, 181, 228, 82, 37, 140, 167, 196, 184, 138, 196, 0, 6, 109, 13, 74, 48, 92, 211, 196, 227, 168, 26, 191, 7, 145, 61, 100, 54, 64, 191, 125, 31, 215, 172, 173, 189, 195, 157, 247, 229, 100, 238, 136, 51, 66, 5, 126, 176, 78, 4, 243, 234, 130, 249, 92, 232, 118, 141, 169, 4, 126, 105, 187, 179, 52, 137, 155, 58, 64, 224, 152, 69, 179, 249, 186, 97, 123, 126, 251, 226, 165, 78, 133, 190, 20, 72, 222, 215, 120, 207, 115, 214, 3, 119, 115, 152, 190, 150, 62, 232, 233, 54, 86, 10, 164, 8, 36, 18, 210, 173, 249, 232, 232, 106, 195, 136, 254, 78, 26, 84, 9, 86, 123, 240, 180, 254, 72, 202, 225, 36, 195, 254, 92, 254, 239, 143, 211, 74, 19, 27, 63, 134, 199, 198, 122, 29, 180, 63, 174, 204, 130, 220, 178, 169, 27, 184, 17, 245, 61, 149, 84, 13, 183, 221, 68, 99, 37, 42, 47, 45, 18, 58, 152, 185, 108, 243, 122, 76, 147, 20, 231, 53, 137, 9, 50, 197, 6, 172, 132, 60, 174, 68, 37, 178, 151, 51, 158, 10, 207, 165, 21, 54, 27, 154, 35, 173, 83, 171, 165, 220, 91, 116, 20, 3, 97, 33, 203, 250, 102, 80, 53, 5, 129, 162, 48, 205, 63, 127, 238, 177, 188, 88, 60, 237, 245, 81, 253, 14, 99, 87, 79, 24, 242, 149, 170, 110, 121, 157, 237, 53, 97, 35, 206, 124, 1, 95, 176, 3, 35, 17, 73, 191, 192, 249, 209, 223, 200, 222, 232, 96, 40, 217, 178, 26, 169, 64, 179, 83, 134, 126, 225, 86, 149, 78, 147, 20, 242, 146, 23, 23, 153, 224, 135, 74, 204, 25, 208, 179, 158, 217, 109, 173, 236, 132, 76, 252, 201, 191, 55, 220, 102, 169, 102, 246, 76, 194, 87, 201, 169, 97, 0, 207, 113, 164, 31, 144, 45, 49, 19, 79, 88, 66, 95, 126, 111, 187, 28, 15, 249, 103, 157, 241, 170, 214, 248, 225, 196, 145, 76, 253, 143, 204, 165, 52, 253, 60, 195, 99, 52, 82, 239, 31, 177, 208, 81, 224, 119, 237, 207, 64, 96, 70, 108, 247, 139, 243, 136, 47, 225, 3, 56, 139, 90, 107, 244, 239, 237, 237, 69, 232, 185, 155, 76, 144, 132, 134, 39, 185, 153, 55, 94, 75, 235, 167, 139, 220, 180, 85, 152, 24, 205, 62, 109, 18, 166, 58, 3, 220, 207, 134, 158, 166, 156, 175, 48, 160, 34, 215, 190, 169, 48, 148, 188, 160, 246, 42, 58, 108, 239, 104, 49, 19, 185, 94, 183, 7, 189, 45, 64, 190, 99, 108, 136, 144, 202]);

    x.should.eql([81, 5, 119, 54, 218, 179, 44, 225, 157, 58, 103, 65, 218, 10, 233, 139, 92, 178, 251, 9, 226, 232, 225, 14, 10, 46, 181, 12, 54, 74, 104, 158, 51, 218, 66, 147, 3, 217, 172, 45, 152, 200, 5, 22, 105, 153, 98, 182, 122, 102, 68, 57, 33, 204, 223, 145, 163, 99, 45, 174, 41, 241, 66, 197, 24, 38, 96, 140, 163, 43, 146, 6, 182, 251, 228, 88, 24, 118, 123, 208, 213, 214, 131, 212, 226, 107, 125, 200, 190, 206, 35, 51, 21, 0, 191, 194, 235, 87, 79, 28, 231, 200, 218, 112, 244, 0, 141, 28, 154, 94, 210, 206, 42, 237, 42, 202, 54, 120, 50, 206, 157, 133, 236, 40, 250, 210, 175, 95, 73, 15, 170, 201, 235, 233, 150, 109, 114, 4, 235, 19, 227, 130, 133, 28, 32, 28, 83, 12, 111, 71, 237, 152, 150, 98, 193, 134, 135, 151, 192, 58, 165, 118, 236, 16, 131, 133, 193, 134, 234, 117, 198, 236, 234, 220, 190, 57, 76, 94, 160, 224, 66, 101, 56, 231, 75, 50, 171, 118, 148, 98, 212, 240, 147, 161, 6, 218, 116, 74, 202, 10, 231, 212, 14, 108, 146, 8, 45, 247, 9, 183, 171, 24, 245, 6, 96, 230, 206, 111, 185, 32, 231, 149, 174, 78, 248, 126, 145, 87, 57, 79, 73, 59, 68, 123, 207, 208, 161, 242, 220, 18, 246, 231, 133, 16, 152, 118, 157, 103, 29, 219, 96, 118, 191, 180, 134, 124, 120, 172, 98, 4, 93, 250, 194, 48, 171, 237, 250, 50, 11, 3, 23, 205, 252, 127, 130, 66, 197, 144, 192, 203, 169, 125, 70, 183, 113, 127, 65, 196, 141, 242, 251, 76, 122, 57, 114, 216, 129, 200, 253, 79, 249, 31, 18, 198, 73, 77, 44, 242, 66, 110, 50, 246, 107, 201, 92, 103, 17, 109, 224, 225, 207, 197, 239, 110, 234, 47, 109, 37, 27, 147, 168, 171, 158, 84, 204, 125, 72, 176, 98, 101, 174, 21, 186, 82, 246, 232, 3, 117, 48, 66, 213, 29, 151, 133, 133, 109, 55, 241, 55, 158, 50, 231, 1, 89, 246, 138, 224, 130, 172, 230, 103, 132, 3, 85, 106, 222, 200, 128, 71, 66, 219, 253, 138, 176, 198, 65, 104, 34, 229, 142, 201, 177, 166, 1, 160, 230, 200, 39, 73, 87, 172, 11, 63, 69, 166, 145, 41, 188, 111, 64, 248, 210, 20, 68, 20, 64, 212, 111, 211, 189, 48, 240, 29, 158, 115, 72, 22, 13, 137, 243, 249, 83, 92, 180, 253, 16, 114, 123, 126, 101, 111, 74, 157, 75, 66, 251, 108, 165, 134, 88, 212, 63, 211, 240, 247, 44, 98, 18, 68, 237, 87, 238, 78, 58, 169, 61, 248, 177, 85, 186, 138, 51, 206, 26, 85, 233, 255, 176, 125, 118, 236, 208, 87, 111, 221, 168, 214, 46, 160, 93, 56, 142, 35, 152, 221, 33, 200, 11, 162, 90]);
    y.should.eql([67, 229, 224, 223, 60, 183, 150, 189, 109, 97, 144, 224, 42, 225, 209, 91, 63, 16, 250, 75, 145, 100, 213, 224, 104, 67, 224, 198, 225, 255, 166, 67, 212, 145, 175, 131, 156, 204, 72, 1, 54, 38, 88, 75, 217, 55, 212, 124, 114, 175, 129, 104, 172, 201, 235, 80, 74, 108, 139, 57, 100, 90, 215, 17, 207, 180, 143, 109, 188, 51, 149, 232, 18, 202, 255, 224, 78, 155, 119, 160, 27, 184, 126, 41, 142, 208, 136, 136, 130, 226, 164, 147, 217, 111, 25, 250, 171, 125, 9, 73, 230, 235, 112, 61, 101, 180, 15, 43, 112, 35, 225, 84, 107, 117, 96, 24, 75, 174, 184, 177, 202, 183, 47, 217, 240, 25, 234, 239, 41, 101, 7, 201, 46, 129, 98, 43, 145, 100, 14, 172, 253, 213, 142, 205, 223, 74, 188, 69, 88, 109, 179, 175, 172, 29, 85, 168, 159, 105, 19, 84, 214, 28, 115, 219, 190, 167, 124, 0, 182, 3, 188, 127, 87, 186, 153, 218, 143, 102, 219, 40, 217, 93, 147, 156, 92, 129, 99, 172, 174, 250, 255, 155, 205, 17, 148, 221, 30, 100, 227, 90, 11, 10, 6, 43, 139, 156, 8, 142, 176, 8, 206, 238, 117, 195, 180, 100, 119, 243, 67, 34, 158, 193, 225, 168, 161, 182, 184, 232, 42, 234, 170, 31, 158, 82, 168, 254, 244, 85, 9, 222, 186, 13, 230, 118, 242, 96, 33, 241, 199, 222, 16, 22, 116, 50, 117, 2, 221, 228, 175, 73, 221, 121, 166, 175, 42, 59, 71, 230, 129, 155, 145, 130, 209, 217, 181, 118, 228, 197, 67, 235, 250, 81, 32, 25, 124, 95, 41, 142, 216, 44, 12, 23, 3, 101, 136, 116, 11, 72, 151, 5, 233, 179, 92, 215, 161, 199, 214, 12, 41, 203, 144, 32, 179, 6, 98, 229, 249, 171, 125, 143, 209, 252, 104, 228, 173, 223, 35, 180, 2, 176, 151, 146, 163, 55, 19, 147, 81, 81, 92, 253, 117, 40, 39, 54, 155, 171, 135, 14, 161, 140, 75, 67, 58, 135, 46, 185, 20, 229, 147, 111, 120, 1, 133, 156, 180, 122, 44, 67, 113, 0, 44, 246, 224, 232, 71, 52, 62, 202, 24, 166, 6, 144, 156, 83, 244, 210, 14, 255, 164, 61, 12, 104, 231, 226, 2, 109, 239, 134, 156, 163, 151, 33, 61, 47, 86, 158, 83, 47, 108, 229, 174, 116, 83, 49, 99, 166, 184, 212, 19, 11, 190, 194, 216, 131, 150, 15, 254, 192, 156, 102, 137, 130, 230, 244, 122, 84, 70, 208, 251, 30, 249, 72, 155, 15, 154, 143, 9, 34, 58, 212, 25, 248, 119, 165, 222, 0, 3, 25, 239, 213, 25, 49, 83, 74, 162, 124, 253, 77, 209, 164, 89, 33, 237, 67, 124, 86, 37, 52, 60, 245, 181, 85, 104, 132, 152, 36, 64, 240, 207, 167, 57, 238, 24, 29, 59, 5, 45, 73, 39, 25]);
  });

  it("Should multiply large numbers", function () {
    var x = [81, 5, 119, 54, 218, 179, 44, 225, 157, 58, 103, 65, 218, 10, 233, 139, 92, 178, 251, 9, 226, 232, 225, 14, 10, 46, 181, 12, 54, 74, 104, 158, 51, 218, 66, 147, 3, 217, 172, 45, 152, 200, 5, 22, 105, 153, 98, 182, 122, 102, 68, 57, 33, 204, 223, 145, 163, 99, 45, 174, 41, 241, 66, 197, 24, 38, 96, 140, 163, 43, 146, 6, 182, 251, 228, 88, 24, 118, 123, 208, 213, 214, 131, 212, 226, 107, 125, 200, 190, 206, 35, 51, 21, 0, 191, 194, 235, 87, 79, 28, 231, 200, 218, 112, 244, 0, 141, 28, 154, 94, 210, 206, 42, 237, 42, 202, 54, 120, 50, 206, 157, 133, 236, 40, 250, 210, 175, 95, 73, 15, 170, 201, 235, 233, 150, 109, 114, 4, 235, 19, 227, 130, 133, 28, 32, 28, 83, 12, 111, 71, 237, 152, 150, 98, 193, 134, 135, 151, 192, 58, 165, 118, 236, 16, 131, 133, 193, 134, 234, 117, 198, 236, 234, 220, 190, 57, 76, 94, 160, 224, 66, 101, 56, 231, 75, 50, 171, 118, 148, 98, 212, 240, 147, 161, 6, 218, 116, 74, 202, 10, 231, 212, 14, 108, 146, 8, 45, 247, 9, 183, 171, 24, 245, 6, 96, 230, 206, 111, 185, 32, 231, 149, 174, 78, 248, 126, 145, 87, 57, 79, 73, 59, 68, 123, 207, 208, 161, 242, 220, 18, 246, 231, 133, 16, 152, 118, 157, 103, 29, 219, 96, 118, 191, 180, 134, 124, 120, 172, 98, 4, 93, 250, 194, 48, 171, 237, 250, 50, 11, 3, 23, 205, 252, 127, 130, 66, 197, 144, 192, 203, 169, 125, 70, 183, 113, 127, 65, 196, 141, 242, 251, 76, 122, 57, 114, 216, 129, 200, 253, 79, 249, 31, 18, 198, 73, 77, 44, 242, 66, 110, 50, 246, 107, 201, 92, 103, 17, 109, 224, 225, 207, 197, 239, 110, 234, 47, 109, 37, 27, 147, 168, 171, 158, 84, 204, 125, 72, 176, 98, 101, 174, 21, 186, 82, 246, 232, 3, 117, 48, 66, 213, 29, 151, 133, 133, 109, 55, 241, 55, 158, 50, 231, 1, 89, 246, 138, 224, 130, 172, 230, 103, 132, 3, 85, 106, 222, 200, 128, 71, 66, 219, 253, 138, 176, 198, 65, 104, 34, 229, 142, 201, 177, 166, 1, 160, 230, 200, 39, 73, 87, 172, 11, 63, 69, 166, 145, 41, 188, 111, 64, 248, 210, 20, 68, 20, 64, 212, 111, 211, 189, 48, 240, 29, 158, 115, 72, 22, 13, 137, 243, 249, 83, 92, 180, 253, 16, 114, 123, 126, 101, 111, 74, 157, 75, 66, 251, 108, 165, 134, 88, 212, 63, 211, 240, 247, 44, 98, 18, 68, 237, 87, 238, 78, 58, 169, 61, 248, 177, 85, 186, 138, 51, 206, 26, 85, 233, 255, 176, 125, 118, 236, 208, 87, 111, 221, 168, 214, 46, 160, 93, 56, 142, 35, 152, 221, 33, 200, 11, 162, 90],
        y = [228, 97, 60, 177, 171, 84, 14, 101, 149, 62, 192, 188, 94, 75, 108, 121, 9, 144, 134, 19, 232, 148, 162, 170, 127, 86, 85, 253, 54, 119, 15, 115, 48, 92, 186, 141, 153, 156, 107, 193, 79, 113, 58, 235, 79, 103, 129, 111, 64, 24, 156, 6, 76, 96, 162, 58, 183, 216, 181, 193, 43, 137, 2, 143, 232, 170, 187, 127, 60, 174, 69, 127, 147, 68, 108, 180, 112, 165, 148, 250, 188, 217, 70, 139, 23, 192, 117, 245, 214, 82, 74, 148, 157, 189, 178, 74, 208, 157, 176, 244, 77, 166, 171, 18, 95, 224, 14, 100, 36, 23, 165, 152, 253, 69, 130, 248, 143, 210, 122, 254, 6, 59, 23, 21, 168, 183, 204, 94, 67, 36, 68, 160, 202, 116, 187, 201, 151, 149, 33, 182, 71, 139, 220, 193, 77, 165, 27, 3, 183, 70, 101, 247, 16, 142, 166, 236, 12, 60, 206, 135, 62, 63, 16, 72, 74, 133, 135, 172, 131, 125, 179, 46, 6, 118, 119, 8, 123, 135, 90, 180, 80, 66, 209, 83, 218, 125, 122, 25, 181, 83, 62, 226, 84, 48, 202, 82, 145, 70, 139, 9, 229, 161, 246, 100, 171, 171, 229, 226, 12, 136, 97, 247, 254, 196, 107, 30, 156, 2, 255, 20, 30, 196, 25, 15, 186, 26, 243, 135, 122, 81, 82, 230, 113, 119, 119, 6, 30, 2, 40, 48, 177, 82, 122, 201, 77, 173, 167, 73, 95, 174, 169, 120, 69, 221, 122, 87, 168, 237, 127, 31, 114, 182, 210, 181, 254, 36, 48, 43, 58, 68, 250, 165, 60, 99, 37, 244, 65, 51, 100, 184, 251, 163, 38, 16, 37, 191, 113, 130, 175, 129, 147, 173, 61, 142, 147, 243, 205, 160, 154, 199, 190, 134, 75, 27, 3, 115, 72, 253, 244, 58, 154, 14, 215, 18, 138, 109, 112, 30, 227, 147, 180, 107, 112, 195, 139, 207, 146, 155, 234, 48, 140, 119, 220, 15, 11, 200, 190, 118, 24, 217, 22, 46, 55, 57, 251, 34, 144, 83, 90, 9, 218, 233, 224, 244, 132, 21, 114, 254, 227, 126, 11, 143, 176, 127, 55, 198, 244, 1, 51, 76, 100, 17, 192, 241, 84, 67, 206, 71, 220, 130, 138, 231, 255, 153, 150, 71, 1, 119, 214, 183, 17, 133, 213, 182, 110, 246, 119, 115, 74, 173, 184, 64, 46, 228, 116, 198, 211, 128, 95, 34, 101, 183, 156, 185, 180, 71, 219, 98, 112, 44, 19, 205, 56, 207, 83, 126, 179, 4, 164, 102, 146, 175, 58, 156, 197, 57, 119, 59, 164, 189, 54, 103, 17, 214, 188, 150, 164, 58, 51, 1, 132, 158, 162, 251, 67, 245, 201, 91, 145, 221, 112, 59, 25, 147, 226, 3, 185, 235, 219, 107, 167, 202, 3, 98, 226, 130, 39, 223, 228, 245, 2, 203, 54, 0, 107, 224, 83, 185, 107, 134, 252, 236, 35, 107, 129, 54, 108, 7, 108, 69, 221, 34, 11, 136, 166, 154, 22, 133, 1, 205, 213, 196, 230, 36, 85, 226, 226, 146, 44, 206, 84, 57, 139, 211, 19, 151, 153, 86, 225, 195, 183, 8, 71, 188, 32, 60, 126, 121, 88, 59, 103, 33, 214, 201, 88, 223, 65, 64, 11, 73, 61, 226, 54, 176, 97, 134, 24, 145, 247, 138, 16, 230, 18, 208, 237, 208, 67, 140, 105, 86, 170, 201, 190, 131, 89, 47, 43, 40, 152, 196, 249, 31, 162, 242, 211, 29, 228, 111, 94, 141, 156, 200, 195, 6, 39, 186, 55, 77, 9, 232, 138, 225, 186, 162, 1, 138, 253, 4, 212, 98, 188, 208, 99, 185, 192, 109, 88, 173, 39, 74, 167, 210, 190, 251, 255, 92, 32, 59, 121, 186, 203, 241, 71, 79, 213, 119, 170, 146, 228, 204, 133, 241, 87, 103, 17, 35, 228, 78, 223, 162, 164, 207, 221, 74, 70, 222, 223, 216, 32, 217, 146, 74, 206, 13, 57, 69, 193, 43, 138, 185, 184, 237, 254, 77, 238, 172, 42, 176, 143, 188, 105, 16, 17, 22, 104, 138, 248, 18, 130, 84, 70, 172, 18, 142, 65, 86, 106, 127, 52, 178, 0, 215, 127, 200, 244, 93, 128, 143, 247, 216, 113, 92, 235, 124, 215, 150, 230, 114, 223, 78, 200, 71, 81, 210, 24, 130, 1, 32, 94, 134, 191, 80, 3, 12, 65, 115, 1, 227, 24, 247, 249, 11, 126, 139, 132, 113, 240, 80, 93, 239, 4, 48, 72, 201, 47, 220, 242, 229, 112, 146, 207, 88, 2, 27, 95, 41, 165, 225, 220, 51, 142, 185, 77, 92, 40, 250, 177, 197, 167, 204, 121, 213, 212, 168, 228, 195, 163, 186, 99, 61, 3, 68, 22, 180, 177, 7, 243, 132, 206, 142, 196, 216, 141, 52, 30, 91, 45, 154, 114, 104, 207, 214, 47, 197, 7, 10, 158, 28, 199, 103, 219, 27, 50, 144, 230, 72, 236, 11, 190, 199, 196, 144, 83, 77, 201, 215, 125, 24, 245, 162, 65, 162, 250, 235, 97, 254, 213, 240, 54, 191, 229, 227, 73, 230, 207, 129, 204, 107, 223, 65, 124, 200, 68, 171, 167, 249, 137, 105, 80, 86, 106, 13, 141, 123, 27, 6, 18, 155, 97, 6, 106, 13, 56, 173, 124, 101, 142, 43, 18, 15, 52, 134, 104, 190, 170, 38, 218, 68, 213, 30, 128, 69, 156, 50, 113, 105, 55, 244, 252, 156, 30, 100, 224, 196, 188, 226, 171, 170, 182, 222, 219, 37, 178, 101, 165, 123, 224, 121, 31, 100, 66, 118, 72, 228, 1, 40, 10, 41, 131, 86, 231, 1, 75, 58, 227, 14, 65, 115, 126, 46, 152, 69, 137, 20, 115, 226, 68, 157, 62, 12, 216, 141, 249, 180, 108, 116, 228, 148, 157, 79, 129, 19, 9, 220, 173, 78, 74, 201, 68, 112, 210, 74, 138, 224, 174, 85, 246, 152, 88, 215, 61, 110, 61, 162, 66, 220, 77, 246, 6, 189];

    crunch.mulk(x, y).should.eql([72, 71, 164, 116, 137, 129, 251, 7, 90, 234, 5, 4, 50, 196, 161, 11, 223, 67, 93, 174, 2, 192, 40, 54, 51, 53, 184, 71, 241, 147, 24, 52, 108, 50, 227, 35, 22, 9, 22, 24, 114, 217, 15, 245, 236, 115, 142, 170, 148, 25, 67, 217, 124, 68, 18, 240, 168, 203, 99, 251, 167, 12, 142, 132, 191, 14, 21, 18, 90, 248, 124, 96, 133, 154, 163, 45, 200, 242, 208, 97, 239, 96, 102, 136, 16, 56, 219, 73, 205, 34, 56, 223, 220, 230, 164, 155, 247, 52, 234, 167, 231, 81, 211, 88, 107, 232, 70, 16, 246, 14, 11, 15, 49, 91, 1, 66, 236, 65, 167, 83, 38, 121, 116, 230, 73, 12, 125, 125, 142, 124, 246, 85, 77, 24, 29, 119, 208, 232, 53, 245, 129, 119, 39, 245, 69, 14, 143, 186, 75, 111, 106, 117, 33, 231, 243, 19, 17, 253, 82, 132, 163, 16, 39, 150, 76, 12, 85, 137, 201, 233, 223, 99, 141, 125, 151, 21, 122, 214, 146, 67, 144, 15, 187, 108, 145, 239, 4, 13, 194, 96, 23, 67, 229, 78, 234, 51, 116, 33, 140, 145, 212, 98, 3, 183, 15, 176, 191, 186, 104, 124, 42, 221, 193, 30, 78, 68, 44, 19, 154, 162, 67, 41, 243, 252, 42, 215, 12, 220, 99, 197, 96, 152, 237, 8, 251, 14, 172, 96, 237, 116, 142, 249, 144, 19, 186, 240, 95, 185, 200, 18, 122, 73, 103, 153, 226, 57, 255, 231, 239, 238, 141, 34, 106, 234, 63, 253, 198, 68, 24, 46, 99, 29, 144, 49, 92, 31, 72, 76, 244, 19, 155, 135, 66, 144, 63, 225, 4, 27, 190, 223, 75, 92, 75, 48, 127, 58, 16, 166, 85, 27, 109, 51, 12, 127, 15, 89, 61, 244, 30, 87, 2, 109, 93, 40, 134, 162, 43, 75, 254, 175, 249, 219, 238, 182, 147, 8, 172, 163, 49, 241, 235, 156, 217, 117, 32, 231, 116, 63, 34, 175, 134, 85, 88, 0, 54, 248, 91, 86, 227, 223, 37, 146, 26, 70, 62, 4, 119, 68, 7, 249, 249, 220, 233, 225, 174, 47, 97, 250, 33, 105, 207, 217, 161, 229, 168, 193, 87, 232, 159, 255, 47, 156, 79, 11, 199, 234, 113, 68, 195, 98, 71, 28, 183, 216, 194, 182, 214, 66, 88, 236, 77, 197, 240, 101, 34, 46, 74, 31, 241, 127, 21, 195, 254, 167, 4, 250, 122, 209, 208, 48, 72, 197, 242, 101, 93, 66, 0, 82, 215, 214, 112, 145, 175, 102, 37, 210, 158, 62, 110, 81, 16, 23, 207, 126, 52, 167, 10, 111, 158, 29, 129, 111, 178, 52, 120, 252, 187, 71, 171, 120, 155, 80, 135, 98, 176, 33, 129, 241, 21, 167, 229, 92, 130, 233, 88, 2, 221, 142, 91, 194, 28, 83, 199, 89, 15, 108, 121, 8, 20, 212, 196, 106, 105, 61, 27, 195, 113, 216, 216, 205, 165, 170, 83, 56, 70, 39, 12, 126, 79, 150, 208, 29, 32, 189, 56, 194, 117, 207, 216, 36, 41, 111, 16, 250, 1, 242, 61, 220, 79, 254, 9, 25, 195, 52, 99, 18, 75, 129, 31, 69, 60, 59, 163, 118, 203, 202, 93, 97, 195, 70, 137, 241, 20, 160, 160, 10, 87, 50, 250, 3, 87, 107, 62, 168, 231, 185, 92, 79, 58, 16, 226, 67, 234, 63, 80, 194, 73, 153, 245, 116, 143, 194, 137, 185, 240, 164, 34, 150, 133, 48, 5, 88, 174, 243, 37, 81, 187, 162, 202, 201, 101, 207, 111, 220, 158, 12, 194, 8, 228, 58, 234, 114, 2, 32, 100, 100, 231, 229, 35, 253, 12, 29, 48, 229, 116, 180, 137, 80, 52, 178, 119, 180, 188, 154, 215, 255, 5, 15, 80, 199, 70, 82, 116, 98, 254, 118, 189, 211, 30, 102, 92, 209, 78, 92, 153, 215, 203, 1, 203, 214, 191, 22, 112, 217, 79, 36, 190, 15, 13, 37, 111, 33, 0, 166, 69, 108, 82, 155, 228, 125, 216, 246, 89, 59, 68, 142, 33, 229, 39, 195, 234, 182, 13, 139, 223, 197, 167, 22, 148, 239, 158, 240, 101, 106, 87, 44, 7, 78, 246, 90, 163, 35, 117, 126, 16, 48, 164, 134, 255, 38, 113, 66, 171, 251, 156, 187, 128, 238, 178, 196, 59, 251, 94, 193, 58, 28, 86, 61, 87, 175, 18, 234, 163, 93, 116, 236, 56, 218, 24, 55, 104, 19, 208, 54, 33, 0, 179, 104, 164, 25, 58, 182, 31, 141, 22, 30, 10, 39, 219, 54, 103, 203, 108, 250, 207, 240, 82, 164, 189, 67, 142, 229, 129, 195, 48, 154, 203, 92, 62, 155, 176, 238, 187, 72, 155, 240, 23, 74, 46, 243, 66, 28, 167, 100, 128, 220, 239, 177, 115, 48, 195, 183, 145, 46, 59, 148, 206, 116, 245, 86, 226, 69, 38, 238, 221, 18, 195, 213, 36, 84, 117, 78, 234, 40, 90, 165, 67, 220, 94, 81, 81, 118, 91, 228, 105, 221, 195, 251, 36, 9, 113, 58, 248, 117, 21, 239, 63, 61, 254, 28, 124, 104, 19, 220, 239, 123, 180, 58, 20, 207, 0, 226, 71, 139, 172, 78, 115, 122, 241, 124, 64, 197, 243, 82, 187, 62, 122, 188, 135, 87, 191, 23, 98, 19, 161, 18, 142, 231, 128, 22, 12, 40, 242, 0, 173, 182, 0, 117, 202, 212, 235, 210, 124, 134, 255, 110, 68, 29, 174, 74, 146, 216, 133, 101, 191, 148, 9, 104, 164, 33, 238, 45, 192, 1, 74, 252, 2, 114, 252, 227, 9, 171, 122, 47, 64, 243, 116, 32, 209, 114, 86, 159, 110, 237, 131, 203, 12, 70, 59, 127, 215, 22, 253, 67, 58, 198, 212, 60, 7, 115, 70, 2, 72, 158, 175, 217, 187, 91, 21, 109, 84, 60, 73, 113, 118, 232, 137, 16, 207, 164, 177, 243, 106, 23, 224, 207, 170, 25, 219, 246, 69, 117, 135, 128, 206, 194, 74, 39, 67, 230, 217, 153, 25, 247, 188, 18, 71, 132, 146, 147, 145, 210, 232, 45, 41, 119, 192, 159, 214, 168, 150, 187, 173, 237, 124, 20, 186, 156, 4, 50, 7, 73, 117, 197, 167, 181, 149, 193, 41, 148, 230, 11, 136, 224, 246, 143, 8, 73, 118, 193, 14, 144, 158, 183, 198, 134, 56, 147, 43, 180, 25, 231, 55, 151, 38, 249, 130, 14, 120, 37, 77, 135, 107, 27, 32, 80, 9, 105, 112, 119, 248, 21, 81, 9, 25, 134, 41, 227, 93, 223, 75, 163, 115, 5, 104, 172, 121, 191, 71, 216, 239, 16, 173, 70, 100, 171, 26, 169, 194, 167, 208, 109, 128, 39, 134, 124, 207, 136, 65, 203, 232, 232, 66, 127, 76, 169, 72, 238, 11, 254, 127, 119, 94, 23, 131, 45, 197, 107, 160, 122, 194, 47, 127, 57, 100, 74, 182, 126, 77, 14, 96, 158, 33, 247, 120, 162, 169, 20, 50, 56, 200, 126, 231, 88, 4, 197, 231, 72, 101, 208, 238, 171, 79, 133, 103, 140, 131, 164, 10, 219, 231, 214, 124, 189, 75, 164, 72, 112, 177, 84, 140, 18, 137, 72, 99, 239, 235, 84, 17, 37, 104, 183, 143, 143, 16, 48, 78, 206, 129, 234, 217, 53, 10, 131, 4, 190, 183, 3, 151, 201, 68, 67, 59, 229, 55, 172, 0, 160, 32, 4, 234, 161, 149, 50, 3, 104, 124, 56, 173, 250, 113, 151, 238, 96, 135, 192, 192, 180, 210, 97, 133, 183, 188, 115, 109, 70, 131, 166, 214, 250, 66, 152, 41, 6, 167, 31, 64, 127, 31, 121, 176, 220, 172, 150, 132, 143, 137, 76, 160, 19, 255, 138, 51, 16, 110, 40, 95, 116, 44, 99, 121, 202, 113, 88, 209, 238, 180, 69, 45, 190, 23, 60, 212, 28, 167, 27, 145, 176, 39, 61, 238, 187, 26, 20, 120, 206, 142, 184, 189, 233, 91, 18, 201, 131, 27, 14, 66, 208, 87, 68, 206, 194, 23, 92, 103, 216, 72, 61, 64, 15, 131, 85, 137, 132, 86, 9, 145, 176, 25, 230, 33, 120, 176, 55, 254, 52, 191, 197, 69, 88, 165, 93, 27, 168, 104, 153, 101, 218, 218, 178, 167, 125, 139, 39, 9, 106, 161, 69, 10, 39, 54, 227, 103, 30, 2, 165, 151, 161, 189, 96, 10, 254, 114, 2, 108, 24, 128, 186, 237, 209, 4, 128, 107, 21, 234, 243, 198, 198, 47, 246, 98, 240, 40, 130, 206, 9, 212, 202, 116, 93, 71, 82, 128, 88, 38, 124, 221, 10, 5, 222, 252, 254, 248, 5, 39, 145, 221, 104, 61, 178, 104, 143, 7, 130, 70, 128, 180, 175, 65, 251, 192, 217, 201, 75, 69, 241, 16, 145, 12, 126, 176, 120, 54, 224, 235, 11, 76, 152, 225, 246, 2, 92, 2, 136, 8, 36, 130, 185, 174, 34, 149, 128, 157, 122, 128, 252, 10, 224, 248, 114]);

    x.should.eql([81, 5, 119, 54, 218, 179, 44, 225, 157, 58, 103, 65, 218, 10, 233, 139, 92, 178, 251, 9, 226, 232, 225, 14, 10, 46, 181, 12, 54, 74, 104, 158, 51, 218, 66, 147, 3, 217, 172, 45, 152, 200, 5, 22, 105, 153, 98, 182, 122, 102, 68, 57, 33, 204, 223, 145, 163, 99, 45, 174, 41, 241, 66, 197, 24, 38, 96, 140, 163, 43, 146, 6, 182, 251, 228, 88, 24, 118, 123, 208, 213, 214, 131, 212, 226, 107, 125, 200, 190, 206, 35, 51, 21, 0, 191, 194, 235, 87, 79, 28, 231, 200, 218, 112, 244, 0, 141, 28, 154, 94, 210, 206, 42, 237, 42, 202, 54, 120, 50, 206, 157, 133, 236, 40, 250, 210, 175, 95, 73, 15, 170, 201, 235, 233, 150, 109, 114, 4, 235, 19, 227, 130, 133, 28, 32, 28, 83, 12, 111, 71, 237, 152, 150, 98, 193, 134, 135, 151, 192, 58, 165, 118, 236, 16, 131, 133, 193, 134, 234, 117, 198, 236, 234, 220, 190, 57, 76, 94, 160, 224, 66, 101, 56, 231, 75, 50, 171, 118, 148, 98, 212, 240, 147, 161, 6, 218, 116, 74, 202, 10, 231, 212, 14, 108, 146, 8, 45, 247, 9, 183, 171, 24, 245, 6, 96, 230, 206, 111, 185, 32, 231, 149, 174, 78, 248, 126, 145, 87, 57, 79, 73, 59, 68, 123, 207, 208, 161, 242, 220, 18, 246, 231, 133, 16, 152, 118, 157, 103, 29, 219, 96, 118, 191, 180, 134, 124, 120, 172, 98, 4, 93, 250, 194, 48, 171, 237, 250, 50, 11, 3, 23, 205, 252, 127, 130, 66, 197, 144, 192, 203, 169, 125, 70, 183, 113, 127, 65, 196, 141, 242, 251, 76, 122, 57, 114, 216, 129, 200, 253, 79, 249, 31, 18, 198, 73, 77, 44, 242, 66, 110, 50, 246, 107, 201, 92, 103, 17, 109, 224, 225, 207, 197, 239, 110, 234, 47, 109, 37, 27, 147, 168, 171, 158, 84, 204, 125, 72, 176, 98, 101, 174, 21, 186, 82, 246, 232, 3, 117, 48, 66, 213, 29, 151, 133, 133, 109, 55, 241, 55, 158, 50, 231, 1, 89, 246, 138, 224, 130, 172, 230, 103, 132, 3, 85, 106, 222, 200, 128, 71, 66, 219, 253, 138, 176, 198, 65, 104, 34, 229, 142, 201, 177, 166, 1, 160, 230, 200, 39, 73, 87, 172, 11, 63, 69, 166, 145, 41, 188, 111, 64, 248, 210, 20, 68, 20, 64, 212, 111, 211, 189, 48, 240, 29, 158, 115, 72, 22, 13, 137, 243, 249, 83, 92, 180, 253, 16, 114, 123, 126, 101, 111, 74, 157, 75, 66, 251, 108, 165, 134, 88, 212, 63, 211, 240, 247, 44, 98, 18, 68, 237, 87, 238, 78, 58, 169, 61, 248, 177, 85, 186, 138, 51, 206, 26, 85, 233, 255, 176, 125, 118, 236, 208, 87, 111, 221, 168, 214, 46, 160, 93, 56, 142, 35, 152, 221, 33, 200, 11, 162, 90]);
    y.should.eql([228, 97, 60, 177, 171, 84, 14, 101, 149, 62, 192, 188, 94, 75, 108, 121, 9, 144, 134, 19, 232, 148, 162, 170, 127, 86, 85, 253, 54, 119, 15, 115, 48, 92, 186, 141, 153, 156, 107, 193, 79, 113, 58, 235, 79, 103, 129, 111, 64, 24, 156, 6, 76, 96, 162, 58, 183, 216, 181, 193, 43, 137, 2, 143, 232, 170, 187, 127, 60, 174, 69, 127, 147, 68, 108, 180, 112, 165, 148, 250, 188, 217, 70, 139, 23, 192, 117, 245, 214, 82, 74, 148, 157, 189, 178, 74, 208, 157, 176, 244, 77, 166, 171, 18, 95, 224, 14, 100, 36, 23, 165, 152, 253, 69, 130, 248, 143, 210, 122, 254, 6, 59, 23, 21, 168, 183, 204, 94, 67, 36, 68, 160, 202, 116, 187, 201, 151, 149, 33, 182, 71, 139, 220, 193, 77, 165, 27, 3, 183, 70, 101, 247, 16, 142, 166, 236, 12, 60, 206, 135, 62, 63, 16, 72, 74, 133, 135, 172, 131, 125, 179, 46, 6, 118, 119, 8, 123, 135, 90, 180, 80, 66, 209, 83, 218, 125, 122, 25, 181, 83, 62, 226, 84, 48, 202, 82, 145, 70, 139, 9, 229, 161, 246, 100, 171, 171, 229, 226, 12, 136, 97, 247, 254, 196, 107, 30, 156, 2, 255, 20, 30, 196, 25, 15, 186, 26, 243, 135, 122, 81, 82, 230, 113, 119, 119, 6, 30, 2, 40, 48, 177, 82, 122, 201, 77, 173, 167, 73, 95, 174, 169, 120, 69, 221, 122, 87, 168, 237, 127, 31, 114, 182, 210, 181, 254, 36, 48, 43, 58, 68, 250, 165, 60, 99, 37, 244, 65, 51, 100, 184, 251, 163, 38, 16, 37, 191, 113, 130, 175, 129, 147, 173, 61, 142, 147, 243, 205, 160, 154, 199, 190, 134, 75, 27, 3, 115, 72, 253, 244, 58, 154, 14, 215, 18, 138, 109, 112, 30, 227, 147, 180, 107, 112, 195, 139, 207, 146, 155, 234, 48, 140, 119, 220, 15, 11, 200, 190, 118, 24, 217, 22, 46, 55, 57, 251, 34, 144, 83, 90, 9, 218, 233, 224, 244, 132, 21, 114, 254, 227, 126, 11, 143, 176, 127, 55, 198, 244, 1, 51, 76, 100, 17, 192, 241, 84, 67, 206, 71, 220, 130, 138, 231, 255, 153, 150, 71, 1, 119, 214, 183, 17, 133, 213, 182, 110, 246, 119, 115, 74, 173, 184, 64, 46, 228, 116, 198, 211, 128, 95, 34, 101, 183, 156, 185, 180, 71, 219, 98, 112, 44, 19, 205, 56, 207, 83, 126, 179, 4, 164, 102, 146, 175, 58, 156, 197, 57, 119, 59, 164, 189, 54, 103, 17, 214, 188, 150, 164, 58, 51, 1, 132, 158, 162, 251, 67, 245, 201, 91, 145, 221, 112, 59, 25, 147, 226, 3, 185, 235, 219, 107, 167, 202, 3, 98, 226, 130, 39, 223, 228, 245, 2, 203, 54, 0, 107, 224, 83, 185, 107, 134, 252, 236, 35, 107, 129, 54, 108, 7, 108, 69, 221, 34, 11, 136, 166, 154, 22, 133, 1, 205, 213, 196, 230, 36, 85, 226, 226, 146, 44, 206, 84, 57, 139, 211, 19, 151, 153, 86, 225, 195, 183, 8, 71, 188, 32, 60, 126, 121, 88, 59, 103, 33, 214, 201, 88, 223, 65, 64, 11, 73, 61, 226, 54, 176, 97, 134, 24, 145, 247, 138, 16, 230, 18, 208, 237, 208, 67, 140, 105, 86, 170, 201, 190, 131, 89, 47, 43, 40, 152, 196, 249, 31, 162, 242, 211, 29, 228, 111, 94, 141, 156, 200, 195, 6, 39, 186, 55, 77, 9, 232, 138, 225, 186, 162, 1, 138, 253, 4, 212, 98, 188, 208, 99, 185, 192, 109, 88, 173, 39, 74, 167, 210, 190, 251, 255, 92, 32, 59, 121, 186, 203, 241, 71, 79, 213, 119, 170, 146, 228, 204, 133, 241, 87, 103, 17, 35, 228, 78, 223, 162, 164, 207, 221, 74, 70, 222, 223, 216, 32, 217, 146, 74, 206, 13, 57, 69, 193, 43, 138, 185, 184, 237, 254, 77, 238, 172, 42, 176, 143, 188, 105, 16, 17, 22, 104, 138, 248, 18, 130, 84, 70, 172, 18, 142, 65, 86, 106, 127, 52, 178, 0, 215, 127, 200, 244, 93, 128, 143, 247, 216, 113, 92, 235, 124, 215, 150, 230, 114, 223, 78, 200, 71, 81, 210, 24, 130, 1, 32, 94, 134, 191, 80, 3, 12, 65, 115, 1, 227, 24, 247, 249, 11, 126, 139, 132, 113, 240, 80, 93, 239, 4, 48, 72, 201, 47, 220, 242, 229, 112, 146, 207, 88, 2, 27, 95, 41, 165, 225, 220, 51, 142, 185, 77, 92, 40, 250, 177, 197, 167, 204, 121, 213, 212, 168, 228, 195, 163, 186, 99, 61, 3, 68, 22, 180, 177, 7, 243, 132, 206, 142, 196, 216, 141, 52, 30, 91, 45, 154, 114, 104, 207, 214, 47, 197, 7, 10, 158, 28, 199, 103, 219, 27, 50, 144, 230, 72, 236, 11, 190, 199, 196, 144, 83, 77, 201, 215, 125, 24, 245, 162, 65, 162, 250, 235, 97, 254, 213, 240, 54, 191, 229, 227, 73, 230, 207, 129, 204, 107, 223, 65, 124, 200, 68, 171, 167, 249, 137, 105, 80, 86, 106, 13, 141, 123, 27, 6, 18, 155, 97, 6, 106, 13, 56, 173, 124, 101, 142, 43, 18, 15, 52, 134, 104, 190, 170, 38, 218, 68, 213, 30, 128, 69, 156, 50, 113, 105, 55, 244, 252, 156, 30, 100, 224, 196, 188, 226, 171, 170, 182, 222, 219, 37, 178, 101, 165, 123, 224, 121, 31, 100, 66, 118, 72, 228, 1, 40, 10, 41, 131, 86, 231, 1, 75, 58, 227, 14, 65, 115, 126, 46, 152, 69, 137, 20, 115, 226, 68, 157, 62, 12, 216, 141, 249, 180, 108, 116, 228, 148, 157, 79, 129, 19, 9, 220, 173, 78, 74, 201, 68, 112, 210, 74, 138, 224, 174, 85, 246, 152, 88, 215, 61, 110, 61, 162, 66, 220, 77, 246, 6, 189]);
  });

});

describe("#sqr", function () {

  it("Should square a number", function () {
    var x = [78, 42, 255, 88, 11];

    crunch.sqr(x).should.eql([23, 222, 58, 210, 110, 72, 32, 49, 144, 121]);

    x.should.eql([78, 42, 255, 88, 11]);
  });

  it("Should square a negative number", function () {
    var x = [-162, 62];

    crunch.sqr(x).should.eql([102, 210, 135, 4]);

    x.should.eql([-162, 62]);
  });

  it("Should square zero", function () {
    var x = [0];

    crunch.sqr(x).should.eql([0]);

    x.should.eql([0]);
  });

});

describe("#div", function () {

  it("Should divide numbers", function () {
    var x = [52, 155, 168, 23, 6, 85],
        y = [19, 26, 247];

    crunch.div(x, y).should.eql([2, 192, 234, 136]);

    x.should.eql([52, 155, 168, 23, 6, 85]);
    y.should.eql([19, 26, 247]);
  });

  it("Should divide similar numbers", function () {
    var x = [52, 155, 168, 23, 14, 88, 8, 85],
        y = [52, 155, 168, 23, 14, 88, 6, 85];

    crunch.div(x, y).should.eql([1]);

    x.should.eql([52, 155, 168, 23, 14, 88, 8, 85]);
    y.should.eql([52, 155, 168, 23, 14, 88, 6, 85]);
  });


  it("Should divide by one", function () {
    var x = [15, 127, 73, 1],
        y = [1];

    crunch.div(x, y).should.eql([15, 127, 73, 1]);

    x.should.eql([15, 127, 73, 1]);
    y.should.eql([1]);
  });

  it("Should divide by self", function () {
    var x = [15, 127, 73, 1],
        y = [15, 127, 73, 1];

    crunch.div(x, y).should.eql([1]);

    x.should.eql([15, 127, 73, 1]);
    y.should.eql([15, 127, 73, 1]);
  });

  it("Should divide negative number", function () {
    var x = [-170, 153, 136],
        y = [17, 68];

    crunch.div(x, y).should.eql([-9, 225]);

    x.should.eql([-170, 153, 136]);
    y.should.eql([17, 68]);
  });

  it("Should divide by negative number", function () {
    var x = [170, 153, 136, 119, 102, 85],
        y = [-17, 68];

    crunch.div(x, y).should.eql([-9, 225, 129, 255, 9]);

    x.should.eql([170, 153, 136, 119, 102, 85]);
    y.should.eql([-17, 68]);
  });

  it("Should divide two negative numbers", function () {
    var x = [-52, 155, 168, 23, 6, 85],
        y = [-19, 26, 247];

    crunch.div(x, y).should.eql([2, 192, 234, 136]);

    x.should.eql([-52, 155, 168, 23, 6, 85]);
    y.should.eql([-19, 26, 247]);
  });

  it("Should divide zero", function () {
    var x = [0],
        y = [17, 68];

    crunch.div(x, y).should.eql([0]);

    x.should.eql([0]);
    y.should.eql([17, 68]);
  });

  it("Shouldn't divide by zero", function () {
    var x = [170, 153],
        y = [0];

    should.not.exist(crunch.div(x, y));

    x.should.eql([170, 153]);
    y.should.eql([0]);
  });

  it("Shouldn't divide zero by zero", function () {
    var x = [0],
        y = [0];

    should.not.exist(crunch.div(x, y));

    x.should.eql([0]);
    y.should.eql([0]);
  });

  it("Should divide small number by large", function () {
    var x = [8, 0, 0, 1],
        y = [128, 0, 0, 0, 0, 0, 2];

    crunch.div(x, y).should.eql([0]);

    x.should.eql([8, 0, 0, 1]);
    y.should.eql([128, 0, 0, 0, 0, 0, 2]);
  });

  it("Should divide negative with positive", function () {
  
    var x = [-59, 154, 201, 255],
        y = [59, 154, 201, 254];

    crunch.div(x, y).should.eql([-1]);

    x.should.eql([-59, 154, 201, 255]);
    y.should.eql([59, 154, 201, 254]);
  });

  it("Should divide negative with positive", function () {
  
    var x = [-2],
        y = [2];

    crunch.div(x, y).should.eql([-1]);

    x.should.eql([-2]);
    y.should.eql([2]);
  });
});

describe("#mod", function () {

  it("Should calculate modulo", function () {
    var x = [52, 155, 168, 23, 6, 85],
        y = [19, 26, 247];

    crunch.mod(x, y).should.eql([10, 237, 29]);

    x.should.eql([52, 155, 168, 23, 6, 85]);
    y.should.eql([19, 26, 247]);
  });

  it("Should calculate modulo of number smaller than modulus", function () {
    var x = [1, 0],
        y = [1, 241];

    crunch.mod(x, y).should.eql([1, 0]);

    x.should.eql([1, 0]);
    y.should.eql([1, 241]);
  });

  it("Should calculate modulo of modulus", function () {
    var x = [1, 241],
        y = [1, 241];

    crunch.mod(x, y).should.eql([0]);

    x.should.eql([1, 241]);
    y.should.eql([1, 241]);
  });

  it("Should calculate modulo of zero", function () {
    var x = [0],
        y = [1, 241];

    crunch.mod(x, y).should.eql([0]);

    x.should.eql([0]);
    y.should.eql([1, 241]);
  });

  it("Should calculate modulo of negative", function () {
    var x = [-4],
        y = [3];

    crunch.mod(x, y).should.eql([2]);

    x.should.eql([-4]);
    y.should.eql([3]);
  });

  it("Should calculate modulo of negative", function () {
    var x = [ -10, 18 ],
        y = [ 123 ];

    crunch.mod(x, y).should.eql([ 5 ]);

    x.should.eql([ -10, 18 ]);
    y.should.eql([ 123 ]);
  });

  it("Should calculate modulo of negative", function () {
    var x = [ -15, 62, 62, 18, 176 ],
        y = [ 139, 207, 194, 82 ];

    crunch.mod(x, y).should.eql([ 12, 123, 46, 72 ]);

    x.should.eql([ -15, 62, 62, 18, 176 ]);
    y.should.eql([ 139, 207, 194, 82 ]);
  });

  it("Should mod positive with negative", function () {
  
    var x = [ 3, 255, 255, 247],
        y = [ -31, 255, 255, 255, 255, 255, 247 ];

    crunch.mod(x, y).should.eql([ 3, 255, 255, 247 ]);

    x.should.eql([ 3, 255, 255, 247 ]);
    y.should.eql([ -31, 255, 255, 255, 255, 255, 247 ]);
  });
});

describe("#bmr", function () {

  it("Should calculate modulo", function () {
    var x = [52, 155, 168, 23, 6, 85],
        y = [19, 26, 247];

    crunch.bmr(x, y).should.eql([10, 237, 29]);

    x.should.eql([52, 155, 168, 23, 6, 85]);
    y.should.eql([19, 26, 247]);
  });

  it("Should calculate modulo of number smaller than modulus", function () {
    var x = [1, 0],
        y = [1, 241];

    crunch.bmr(x, y).should.eql([1, 0]);

    x.should.eql([1, 0]);
    y.should.eql([1, 241]);
  });

  it("Should calculate modulo of modulus", function () {
    var x = [1, 241],
        y = [1, 241];

    crunch.bmr(x, y).should.eql([0]);

    x.should.eql([1, 241]);
    y.should.eql([1, 241]);
  });

  it("Should calculate modulo of zero", function () {
    var x = [0],
        y = [1, 241];

    crunch.bmr(x, y).should.eql([0]);

    x.should.eql([0]);
    y.should.eql([1, 241]);
  });

});

describe("#exp", function () {

  it("Should perform modular exponentiation", function () {
    var x = [2, 92, 160],
        y = [45],
        z = [188, 14, 2];

    crunch.exp(x, y, z).should.eql([58, 164, 236]);

    x.should.eql([2, 92, 160]);
    y.should.eql([45]);
    z.should.eql([188, 14, 2]);
  });

  it("Should perform longer modular exponentiation", function () {
    var x = [1, 142, 233, 15, 246, 195, 115, 224, 238, 78, 63, 10, 210],
        y = [1, 0, 1],
        z = [10, 188, 222, 250, 188, 222, 250, 190, 250, 188, 222, 253, 174];

    crunch.exp(x, y, z).should.eql([7, 133, 195, 224, 133, 127, 5, 215, 82, 76, 89, 1, 192]);

    x.should.eql([1, 142, 233, 15, 246, 195, 115, 224, 238, 78, 63, 10, 210]);
    y.should.eql([1, 0, 1]);
    z.should.eql([10, 188, 222, 250, 188, 222, 250, 190, 250, 188, 222, 253, 174]);
  });

  it("Should perform modular exponentiation with larger numbers", function () {
    var x = [1, 35, 101, 20, 152, 20, 54, 18, 53, 20, 138, 254, 255, 18, 55, 134, 19, 25, 171, 205, 225, 56, 113, 70, 16, 151, 69, 1, 152, 20, 152, 97, 40, 151, 18, 70, 171, 237, 254, 253, 190, 18, 135, 54, 20, 145, 71, 97, 57, 25, 98, 20, 54, 175, 175, 171, 187, 190, 18, 54, 112],
        y = [1, 1],
        z = [8, 118, 18, 52, 175, 233, 135, 42, 203, 50, 232, 144, 71, 24, 18, 70, 23, 255, 19, 106, 196, 235, 103, 39, 21, 63, 234, 16, 148, 115, 38, 113, 144, 11, 190, 241, 67, 143, 233, 129, 47, 229, 18, 55, 129, 18, 56, 151, 18, 70, 18, 152, 87, 18, 97, 41, 20, 101, 129, 70, 18];

    crunch.exp(x, y, z).should.eql([1, 159, 78, 124, 229, 239, 112, 56, 255, 59, 96, 97, 44, 130, 171, 143, 191, 104, 65, 205, 217, 254, 68, 206, 182, 177, 214, 54, 223, 237, 14, 37, 120, 130, 214, 30, 91, 225, 128, 141, 153, 17, 15, 231, 171, 74, 34, 208, 10, 42, 178, 194, 68, 76, 124, 129, 74, 203, 8, 100, 40]);

    x.should.eql([1, 35, 101, 20, 152, 20, 54, 18, 53, 20, 138, 254, 255, 18, 55, 134, 19, 25, 171, 205, 225, 56, 113, 70, 16, 151, 69, 1, 152, 20, 152, 97, 40, 151, 18, 70, 171, 237, 254, 253, 190, 18, 135, 54, 20, 145, 71, 97, 57, 25, 98, 20, 54, 175, 175, 171, 187, 190, 18, 54, 112]);
    y.should.eql([1, 1]);
    z.should.eql([8, 118, 18, 52, 175, 233, 135, 42, 203, 50, 232, 144, 71, 24, 18, 70, 23, 255, 19, 106, 196, 235, 103, 39, 21, 63, 234, 16, 148, 115, 38, 113, 144, 11, 190, 241, 67, 143, 233, 129, 47, 229, 18, 55, 129, 18, 56, 151, 18, 70, 18, 152, 87, 18, 97, 41, 20, 101, 129, 70, 18]);
  });

});

describe("#gar", function () {

  it("Should perform modular exponentiation", function () {
    var v = [54, 11, 203],
        w = [147, 221, 12, 0, 9],
        x = [11, 58, 199, 45],
        y = [6, 40, 116, 206, 132, 151, 64, 46, 129],
        z = [1, 90, 87, 231];

    crunch.gar(v, w, x, y, z).should.eql([79, 149, 175, 182, 42, 220, 11, 5]);

    v.should.eql([54, 11, 203]);
    w.should.eql([147, 221, 12, 0, 9]);
    x.should.eql([11, 58, 199, 45]);
    y.should.eql([6, 40, 116, 206, 132, 151, 64, 46, 129]);
    z.should.eql([1, 90, 87, 231]);
  });

  it("Should calculate with dp & dq", function () {
    var x = [54, 11, 203],
        p = [147, 221, 12, 0, 9],
        q = [11, 58, 199, 45],
        d = [6, 40, 116, 206, 132, 151, 64, 46, 129],
        u = [1, 90, 87, 231],
        dp = [68, 119, 73, 74, 185],
        dq = [8, 54, 243, 81];

    crunch.gar(x, p, q, d, u, dp, dq).should.eql([79, 149, 175, 182, 42, 220, 11, 5]);

    x.should.eql([54, 11, 203]);
    p.should.eql([147, 221, 12, 0, 9]);
    q.should.eql([11, 58, 199, 45]);
    d.should.eql([6, 40, 116, 206, 132, 151, 64, 46, 129]);
    u.should.eql([1, 90, 87, 231]);
    dp.should.eql([68, 119, 73, 74, 185]);
    dq.should.eql([8, 54, 243, 81]);
  });

  it("Should perform modular exponentiation", function () {
    var v = [37,72,61,128,78,4,188,90,40,148,179,25,237,153,121,180],
        w = [83,109,25,53,121,92,247,51],
        x = [149,43,167,106,70,148,98,21],
        y = [48,149,33,24,195,123,244,243,237,251,39,62,179,25,87,169],
        z = [103,210,31,75,139,194,84,88];

    crunch.gar(v, w, x, y, z).should.eql([1,2,3,4,5,6,7,8]);

    v.should.eql([37,72,61,128,78,4,188,90,40,148,179,25,237,153,121,180]);
    w.should.eql([83,109,25,53,121,92,247,51]);
    x.should.eql([149,43,167,106,70,148,98,21]);
    y.should.eql([48,149,33,24,195,123,244,243,237,251,39,62,179,25,87,169]);
    z.should.eql([103,210,31,75,139,194,84,88]);
  });

  it("Should perform modular exponentiation", function () {
    var v = [104,46,8,117,98,161,111,189,113,175,163,83,217,166,91,28],
        w = [158,239,229,2,116,132,105,151],
        x = [178,27,170,77,131,87,103,33],
        y = [26,39,124,1,92,246,113,161,76,42,194,69,211,163,133,193],
        z = [39,51,110,215,203,200,103,61];

    crunch.gar(v, w, x, y, z).should.eql([1,2,3,4,5,6,7,8]);

    v.should.eql([104,46,8,117,98,161,111,189,113,175,163,83,217,166,91,28]);
    w.should.eql([158,239,229,2,116,132,105,151]);
    x.should.eql([178,27,170,77,131,87,103,33]);
    y.should.eql([26,39,124,1,92,246,113,161,76,42,194,69,211,163,133,193]);
    z.should.eql([39,51,110,215,203,200,103,61]);
  });

});

describe("#inv", function () {

  it("Should find modular inverse", function () {
    var x = [147, 221, 12, 0, 9],
        y = [11, 58, 199, 45];

    crunch.inv(x, y).should.eql([1, 90, 87, 231]);

    x.should.eql([147, 221, 12, 0, 9]);
    y.should.eql([11, 58, 199, 45]);
  });

  it("Shouldn't find modular inverse", function () {
    var x = [123],
        y = [24];

    should.not.exist(crunch.inv(x, y));

    x.should.eql([123]);
    y.should.eql([24]);
  });

});

describe("#testPrime", function () {

  it("Should find number is prime", function () {
    var x = [254, 87, 121, 7, 0, 217];

    crunch.testPrime(x).should.be.ok;

    x.should.eql([254, 87, 121, 7, 0, 217]);
  });

  it("Should find number is prime", function () {
    var x = [7, 201];

    crunch.testPrime(x).should.be.ok;

    x.should.eql([7, 201]);
  });

  it("Should find number is not prime", function () {
    var x = [9];

    crunch.testPrime(x).should.not.be.ok;

    x.should.eql([9]);
  });

  it("Should find number is not prime", function () {
    var x = [44, 78, 64, 128];

    crunch.testPrime(x).should.not.be.ok;

    x.should.eql([44, 78, 64, 128]);
  });

});

describe("#nextPrime", function () {

  it("Should find next prime", function () {
    var x = [5, 57, 84, 76, 233, 0, 120, 91, 180, 180, 8];

    crunch.nextPrime(x).should.eql([5, 57, 84, 76, 233, 0, 120, 91, 180, 180, 107]);

    x.should.eql([5, 57, 84, 76, 233, 0, 120, 91, 180, 180, 8]);
  });

  it("Should find next prime", function () {
    var x = [17];

    crunch.nextPrime(x).should.eql([19]);

    x.should.eql([17]);
  });

  it("Should find next prime", function () {
    var x = [3];

    crunch.nextPrime(x).should.eql([5]);

    x.should.eql([3]);
  });

  it("Should find next prime", function () {
    var x = [1];

    crunch.nextPrime(x).should.eql([2]);

    x.should.eql([1]);
  });

});

describe("#factorial", function () {

  it("Should find factorial of 10", function () {
    crunch.factorial(10).should.eql([55, 95, 0]);
  });

  it("Should find factorial of 50", function () {
    crunch.factorial(50).should.eql([73, 238, 188, 150, 30, 210, 121, 176, 43, 30, 244, 242, 141, 25, 168, 79, 89, 115, 161, 210, 199, 128, 0, 0, 0, 0, 0]);
  });

  it("Should find factorial of 100", function () {
    crunch.factorial(100).should.eql([27, 48, 150, 78, 195, 149, 220, 36, 6, 149, 40, 213, 75, 189, 164, 13, 22, 233, 102, 239, 154, 112, 235, 33, 181, 178, 148, 58, 50, 28, 223, 16, 57, 23, 69, 87, 12, 202, 148, 32, 198, 236, 179, 183, 46, 210, 238, 139, 2, 234, 39, 53, 198, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
  });

});

describe("#decrement/increment", function () {

  it("Should decrement a number", function () {
    var x = [5, 0];

    crunch.decrement(x).should.eql([4, 255]);

    x.should.eql([5, 0]);
  });

  it("Should decrement a large number", function () {
    var x = [255, 0, 0, 0, 0];

    crunch.decrement(x).should.eql([254, 255, 255, 255, 255]);

    x.should.eql([255, 0, 0, 0, 0]);
  });

  it("Should increment a number", function () {
    var x = [5, 0];

    crunch.increment(x).should.eql([5, 1]);

    x.should.eql([5, 0]);
  });

  it("Should increment a large number", function () {
    var x = [255, 255, 255, 255, 255];

    crunch.increment(x).should.eql([1, 0, 0, 0, 0, 0]);

    x.should.eql([255, 255, 255, 255, 255]);
  });

});

describe("#cut", function () {

  it("Should remove leading zeros", function () {
    var x = [0, 0, 0, 5, 76];

    crunch.cut(x).should.eql([5, 76]);

    x.should.eql([0, 0, 0, 5, 76]);
  });

  it("Should remove leading zeros of zero", function () {
    var x = [0, 0];

    crunch.cut(x).should.eql([0]);

    x.should.eql([0, 0]);
  });

});

describe("#zero", function () {

  it("Should return a zero array", function () {
    crunch.zero(5).should.eql([0, 0, 0, 0, 0]);
  });

});

describe("#and", function () {

  it("Should be bitwise AND of two numbers", function () {
    var x = [22, 11],
        y = [255, 189];

    crunch.and(x, y).should.eql([22, 9]);

    x.should.eql([22, 11]);
    y.should.eql([255, 189]);
  });

  it("Should throw mismatch length error", function () {
    var x = [22, 11, 22],
        y = [255, 189];

    (function () {
      crunch.and(x, y);
    }).should.throw('Mismatched bit lengths');

    x.should.eql([22, 11, 22]);
    y.should.eql([255, 189]);
  });

});

describe("#or", function () {

  it("Should be bitwise OR of two numbers", function () {
    var x = [22, 11],
        y = [255, 189];

    crunch.or(x, y).should.eql([255, 191]);

    x.should.eql([22, 11]);
    y.should.eql([255, 189]);
  });

  it("Should throw mismatch length error", function () {
    var x = [22, 11, 22],
        y = [255, 189];

    (function () {
      crunch.or(x, y);
    }).should.throw('Mismatched bit lengths');

    x.should.eql([22, 11, 22]);
    y.should.eql([255, 189]);
  });

});

describe("#xor", function () {

  it("Should be bitwise XOR of two numbers", function () {
    var x = [22, 11],
        y = [255, 189];

    crunch.xor(x, y).should.eql([233, 182]);

    x.should.eql([22, 11]);
    y.should.eql([255, 189]);
  });

  it("Should throw mismatch length error", function () {
    var x = [22, 11, 22],
        y = [255, 189];

    (function () {
      crunch.xor(x, y);
    }).should.throw('Mismatched bit lengths');

    x.should.eql([22, 11, 22]);
    y.should.eql([255, 189]);
  });

});

describe("#not", function () {

  it("Should be bitwise NOT of a number", function () {
    var x = [22, 11];

    crunch.not(x).should.eql([233, 244]);

    x.should.eql([22, 11]);
  });

});

describe("#leftShift", function () {

  it("Should left shift a number", function () {
    var x = [22, 11],
        s = 5;

    crunch.leftShift(x, s).should.eql([2, 193, 96]);

    x.should.eql([22, 11]);
    s.should.eql(5);
  });

  it("Should left shift a number more", function () {
    var x = [1],
        s = 64;

    crunch.leftShift(x, s).should.eql([1,0,0,0,0,0,0,0,0]);

    x.should.eql([1]);
    s.should.eql(64);
  });

  it("Should left shift zero", function () {
    var x = [0],
        s = 80;

    crunch.leftShift(x, s).should.eql([0]);

    x.should.eql([0]);
    s.should.eql(80);
  });

  it("Should left shift negative", function () {
    var x = [-3],
        s = 8;

    crunch.leftShift(x, s).should.eql([-3, 0]);

    x.should.eql([-3]);
    s.should.eql(8);
  });

  it("Should left shift one", function () {
    var x = [1, 0, 0, 0, 0],
        s = 1;

    crunch.leftShift(x, s).should.eql([2, 0, 0, 0, 0]);

    x.should.eql([1, 0, 0, 0, 0]);
    s.should.eql(1);
  });

});

describe("#rightShift", function () {

  it("Should right shift a number", function () {
    var x = [22, 11],
        s = 5;

    crunch.rightShift(x, s).should.eql([176]);

    x.should.eql([22, 11]);
    s.should.eql(5);
  });

  it("Should right shift a number out of existance", function () {
    var x = [22, 11],
        s = 20;

    crunch.rightShift(x, s).should.eql([0]);

    x.should.eql([22, 11]);
    s.should.eql(20);
  });

  it("Should right shift a negative number", function () {
    var x = [-3],
        s = 8;

    crunch.rightShift(x, s).should.eql([-0]);

    x.should.eql([-3]);
    s.should.eql(8);
  });

});

describe("#parse", function () {

  it("Should convert string to integer", function () {
    var s = "6315359056060240643798024";

    crunch.parse(s).should.eql([5, 57, 84, 76, 233, 0, 120, 91, 180, 180, 8]);

    s.should.equal("6315359056060240643798024");
  });

  it("Should convert string negative number to integer", function () {
    var s = "-256";

    crunch.parse(s).should.eql([-1, 0]);

    s.should.equal("-256");
  });

});

describe("#stringify", function () {

  it("Should convert integer to string", function () {
    var x = [5, 57, 84, 76, 233, 0, 120, 91, 180, 180, 8];

    crunch.stringify(x).should.equal("6315359056060240643798024");

    x.should.eql([5, 57, 84, 76, 233, 0, 120, 91, 180, 180, 8]);
  });

  it("Should convert negative number to string", function () {
    var x = [-7, 91, 205, 21];

    crunch.stringify(x).should.equal("-123456789");

    x.should.eql([-7, 91, 205, 21]);
  });

});

describe("#transform", function () {

  it("Should transform an array, 8->28 bit", function () {
    var x = [255, 255, 255, 255, 255, 255],
        y = [1048575, 268435455];

    y.negative = false;

    crunch.transform(x, true).should.eql(y);

    x.should.eql([255, 255, 255, 255, 255, 255]);
  });

  it("Should transform an array, 28->8 bit", function () {
    var x = [1048575, 268435455];

    crunch.transform(x).should.eql([255, 255, 255, 255, 255, 255]);

    x.should.eql([1048575, 268435455]);
  });

});

describe("#raw", function () {

  var rawc;

  before(function () {
    rawc = require('../crunch').config(true, true);
  });

  it("Should add two numbers", function () {
    var x = [1048575, 268435455],
        y = [1048575, 268435455];

    rawc.add(x, y).should.eql([2097151, 268435454]);

    x.should.eql([1048575, 268435455]);
    y.should.eql([1048575, 268435455]);
  });

});
